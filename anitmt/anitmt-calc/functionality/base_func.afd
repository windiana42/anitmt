// ****************************************************************************
// ****************************************************************************
// ** type definitions
// ****************************************************************************
// ****************************************************************************

base_types{
  vector = values::Vector;
  scalar = values::Scalar;

  time = scalar;
  value = scalar;
  slope = scalar;
  acceleration = scalar;
  stretch = scalar;
  position = vector;
  direction = vector;
  up_vector = vector;
  
  orientation = { direction dir, up_vector up };
}

type scene_type {
}

// ******************
// scalar anitmtion
// ******************

type scalar_component {
  provides value (time);
}

serial type scalar_vsa {
  provides value (time);
  provides slope (time);
  provides acceleration (time);
}

serial type track {
  provides position( stretch );
}

// ******************
// object anitmtion
// ******************

type object_component {
  provides position( time );
  provides orientation( time );
}

serial type space_state {
  provides position( time );
  provides position( stretch );
  provides orientation( time );
  provides orientation( stretch );
}

// ****************************************************************************
// ****************************************************************************
// ** node definitions
// ****************************************************************************
// ****************************************************************************


// +------+
// | root |
// +------+

node root {
  contains {
    scene_type;
  }
}

// +-------+
// | scene |
// +-------+

node scene provides scene_type {
  properties {
    string filename;
  }
  contains {
    scalar_component;
    object_component;
  }
}

// ******************
// scalar anitmtion
// ******************

// +-------------+
// | scalar_base |
// +-------------+
// Werte
node scalar_base {
  properties {
    type scalar {    
      start_time;  end_time;  duration;
      start_value; end_value; difference;
      start_slope; end_slope; slope_difference;
    }
  }  
  aliases {
    diff_slope = slope_difference;
    diff_value = difference;
  }
  common {
    constraints {
      duration >= 0;
    }
    solvers {
      sum_solver ( end_time, duration, start_time );
      sum_solver ( end_value, difference, start_value );
      sum_solver ( end_slope, slope_difference, start_slope );
    }
    actions {
      default( 999, slope_difference, 0 );
      push( 10, end_time, next.start_time );
      push( 11, start_time, prev.end_time );
      push( 20, end_value, next.start_value );
      push( 21, start_value, prev.end_value );
      push( 30, end_slope, next.start_slope );
      push( 31, start_slope, prev.end_slope );
    }
  }
}
// +--------------------+
// | scalar_subfunction |
// +--------------------+
// Werte

node scalar_subfunction extends scalar_base{
}



// +--------+
// | scalar |
// +--------+
// Werte
                          
// Gültige Subfunktionen:
//   change

node scalar extends scalar_base provides scalar_component, scalar_vsa {
//  ...
  contains {
    min1 scalar_vsa;
  }

  first scalar_vsa {
    actions {
      default(100, start_time, 0 );
      default(1000, start_value, 0 );
    }
  }
  
  provide scalar_vsa {
    resulting value( time t ) 
      requires child.scalar_vsa.value (time) 
    { 
      [return_res child.scalar_vsa.value (time t)];
    } 
    resulting slope( time t ) requires child.scalar_vsa.slope (time) {
      [return_res child.scalar_vsa.slope (time t)];
    }
    resulting acceleration( time t ) requires child.scalar_vsa.acceleration (time) {
      [return_res child.scalar_vsa.acceleration (time t)];
    }
  }
  provide scalar_component {
    resulting value( time t ) 
      requires child.scalar_vsa.value (time) 
    { 
      [return_res child.scalar_vsa.value (time t)];
    } 
  }
}
  
