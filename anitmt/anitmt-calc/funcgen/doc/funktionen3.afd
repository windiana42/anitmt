basetypes{
  vector = values::Vector;
  scalar = values::Scalar;

  time = scalar;
  value = scalar;
  slope = scalar;
  acceleration = scalar;
  stretch = scalar;
  position = Vector;
  direction = Vector;
  up_vector = Vector;
  
  //orientation = { direction dir, up_vector up };
}

type scalar_vsa {
  provides value (time);
  provides slope (time);
  provides acceleration (time);
}

/* ex:
type track {
  provides position( stretch );
}

type space_state {
  provides position(time);
  provides orientation(time);
}
*/

// +-------------+
// | scalar_base |
// +-------------+
// Werte
node scalar_base {
  properties {
    type scalar {    
      start_time;  end_time;  duration;
      start_value; end_value; difference;
      start_slope; end_slope; slope_difference;
    }
  }  
  aliases {
    diff_slope = slope_difference;
    diff_value = difference;
  }
  common {
    constraints {
      duration >= 0;
    }
    solvers {
      addition_solver ( start_time, duration, end_time );
      addition_solver ( start_value, difference, end_value );
      addition_solver ( start_slope, slope_difference, end_slope );
    }
  }

// +--------------------+
// | scalar_subfunction |
// +--------------------+
// Werte

node scalar_subfunction extends scalar_base{
}


// +--------+
// | scalar |
// +--------+
// Werte
                          
// Gültige Subfunktionen:
//   change

node scalar extends scalar_base provides scalar_vsa {
  ...
  contains {
    min1 scalar_vsa seriatim;
  }
  
  provide scalar_vsa {
    resulting value( time t ) requires child.scalar_vsa.value (time) {
      return [child.scalar_vsa.value (t)];
    }
    resulting slope( time t ) requires child.scalar_vsa.slope (time) {
      return [child.scalar_vsa.slope (t)];
    }
    resulting acceleration( time t ) requires child.scalar_vsa.acceleration (time) {
      return [child.scalar_vsa.acceleration (t)];
    }
  }
}
  
// +--------+
// | change |   ????
// +--------+
// Werteinterpolationen

// Gültige Subfunktionen:
//   change; constant; linear; accelerated

node change extends scalar_subfunction provides scalar_vsa seriatim{
  ...
  contains {
    min1 scalar_vsa seriatim;
  }
  
  provide scalar_vsa {
    resulting value( time t ) requires child.scalar_vsa.value (time) {
      return [child.scalar_vsa.value (t)];
    }
    resulting slope( time t ) requires child.scalar_vsa.slope (time) {
      return [child.scalar_vsa.slope (t)];
    }
    resulting acceleration( time t ) requires child.scalar_vsa.acceleration (time) {
      return [child.scalar_vsa.acceleration (t)];
    }
  }
}

// +----------+
// | constant |
// +----------+
// beschleunigte Veränderung

// Gültige Subfunktionen:
//   keine!



node constant extends scalar_subfunction provides scalar_vsa seriatim{
  ...
  
  provide scalar_vsa {
    resulting value( time t ) requires value {
      return [value];
    }
    resulting slope( time t ) requires slope {
      return [slope];
    }
    resulting acceleration( time t ) requires acceleration {
      return [acceleration];
    }
  }
}

  
  




