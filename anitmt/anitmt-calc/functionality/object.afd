include declaration "object_base.afd";
//include declaration "base_func.afd";

// ****************************************************************************
// ****************************************************************************
// ** node definitions
// ****************************************************************************
// ****************************************************************************

// ****************************************************************************
// ** object nodes
// ****************************************************************************

// ******************
// object anitmtion
// ******************

abstract node object_subfunc_base provides object_state
{
  properties
  {
    flag auto_rotate;
    type scalar
    {
      start_time;
      start_length;
      start_speed;
      end_time;
      end_length;
      end_speed;
      duration;
      length;
      diff_speed; // difference of the speeds
      up_norm_roll; // rotation of the norm up arount the track

      // orientation
      start_rot_horizontal;
      start_rot_speed_horizontal;
      end_rot_speed_horizontal;
      end_rot_horizontal;
      diff_rot_horizontal;
      diff_rot_speed_horizontal;
      rot_acceleration_horizontal;

      start_rot_vertical;
      start_rot_speed_vertical;
      end_rot_speed_vertical;
      end_rot_vertical;
      diff_rot_vertical;
      diff_rot_speed_vertical;
      rot_acceleration_vertical;

      start_rot_roll;
      start_rot_speed_roll;
      diff_rot_roll;
      end_rot_speed_roll;
      end_rot_roll;
      diff_rot_speed_roll;
      rot_acceleration_roll;
    }
    type vector
    {
      // track
      start_pos;
      start_dir;    // muss Länge=1 sein???
      start_up_norm;
      end_pos;
      end_dir;
      end_up_norm;
      diff_pos;
      direction;
      // orientation
      start_front;
      start_up_vector;
      end_front;
      end_up_vector;
    }
  }
  operands 
  {
    vector start_up_norm_try;
  }
  common
  {
    constraints
    {
      duration >= 0;
      start_speed >= 0;
      end_speed >= 0;
    }
    solvers
    {
      sum_solver( end_time, duration, start_time );
      sum_solver( end_length, length, start_length );
      sum_solver( end_speed, diff_speed, start_speed );
      sum_solver( end_pos, diff_pos, start_pos );
      //equal_solver( start_dir, direction );
      start_dir = normalize( direction );
      direction = normalize( start_dir );
      equal_solver( end_dir, direction );
      
      length = abs( diff_pos );

//!!! a lot missing here !!!

      // orientation
      sum_solver( end_rot_horizontal, diff_rot_horizontal, start_rot_horizontal );
      sum_solver( end_rot_speed_horizontal, diff_rot_speed_horizontal, 
  start_rot_speed_horizontal );
      accel_solver(diff_rot_horizontal, duration, rot_acceleration_horizontal, 
  start_rot_speed_horizontal, end_rot_speed_horizontal);
      product_solver(diff_rot_speed_horizontal, rot_acceleration_horizontal, 
  duration);

      sum_solver( end_rot_vertical, diff_rot_vertical, start_rot_vertical );
      sum_solver( end_rot_speed_vertical, diff_rot_speed_vertical, 
  start_rot_speed_vertical );
      accel_solver(diff_rot_vertical, duration, rot_acceleration_vertical, 
  start_rot_speed_vertical, end_rot_speed_vertical);
      product_solver(diff_rot_speed_vertical, rot_acceleration_vertical, 
  duration);

      sum_solver( end_rot_roll, diff_rot_roll, start_rot_roll );
      sum_solver( end_rot_speed_roll, diff_rot_speed_roll, 
  start_rot_speed_roll );
      accel_solver(diff_rot_roll, duration, rot_acceleration_roll, 
  start_rot_speed_roll, end_rot_speed_roll);
      product_solver(diff_rot_speed_roll, rot_acceleration_roll, duration);

//!!! dummy solvers: !!!
      equal_solver( start_front, end_front );
      equal_solver( start_up_vector, end_up_vector );

      // ********************
      // start/end parameters
      
      //position
      equal_solver( start_time, object_state.position(time).start_param );
      equal_solver( end_time, object_state.position(time).end_param );
      equal_solver( start_length, object_state.position(stretch).start_param );
      equal_solver( end_length, object_state.position(stretch).end_param );
      //direction
      equal_solver( start_time, object_state.direction(time).start_param );
      equal_solver( end_time, object_state.direction(time).end_param );
      equal_solver( start_length, object_state.direction(stretch).start_param );
      equal_solver( end_length, object_state.direction(stretch).end_param );
      //stretch
      equal_solver( start_time, object_state.stretch(time).start_param );
      equal_solver( end_time, object_state.stretch(time).end_param );
      //speed
      equal_solver( start_time, object_state.speed(time).start_param );
      equal_solver( end_time, object_state.speed(time).end_param );
      equal_solver( start_length, object_state.speed(stretch).start_param );
      equal_solver( end_length, object_state.speed(stretch).end_param );
      //acceleration
      equal_solver( start_time, object_state.acceleration(time).start_param );
      equal_solver( end_time, object_state.acceleration(time).end_param );
      equal_solver( start_length, object_state.acceleration(stretch).start_param );
      equal_solver( end_length, object_state.acceleration(stretch).end_param );
      //front
      equal_solver( start_time, object_state.front(time).start_param );
      equal_solver( end_time, object_state.front(time).end_param );
      equal_solver( start_length, object_state.front(stretch).start_param );
      equal_solver( end_length, object_state.front(stretch).end_param );
      //up_vector
      equal_solver( start_time, object_state.up_vector(time).start_param );
      equal_solver( end_time, object_state.up_vector(time).end_param );
      equal_solver( start_length, object_state.up_vector(stretch).start_param );
      equal_solver( end_length, object_state.up_vector(stretch).end_param );
    }
    actions
    {
      push( push_time_fw, end_time, object_state.next.start_time );
      push( push_time_bw, start_time, object_state.prev.end_time );
      push( push_length_fw, end_length, object_state.next.start_length );
      push( push_length_bw, start_length, object_state.prev.end_length );
      push( push_state_fw, end_pos, object_state.next.start_pos );
      push( push_state_bw, start_pos, object_state.prev.end_pos );
      push( push_state2_fw, end_rot_horizontal, object_state.next.start_rot_horizontal );
      push( push_state2_bw, start_rot_horizontal, object_state.prev.end_rot_horizontal );
      push( push_state3_fw, end_rot_vertical, object_state.next.start_rot_vertical );
      push( push_state3_bw, start_rot_vertical, object_state.prev.end_rot_vertical );
      push( push_state4_fw, end_rot_roll, object_state.next.start_rot_roll );
      push( push_state4_bw, start_rot_roll, object_state.prev.end_rot_roll );
      push( push_state_post_fw, end_dir, object_state.next.start_dir );
      push( push_state_post_bw, start_dir, object_state.prev.end_dir );
      push( push_speed_fw, end_speed, object_state.next.start_speed );
      push( push_speed_bw, start_speed, object_state.prev.end_speed );
      push( push_speed2_fw, end_rot_speed_horizontal, 
	object_state.next.start_rot_speed_horizontal );
      push( push_speed2_bw, start_rot_speed_horizontal, 
	object_state.prev.end_rot_speed_horizontal );
      push( push_speed3_fw, end_rot_speed_vertical, 
	object_state.next.start_rot_speed_vertical );
      push( push_speed3_bw, start_rot_speed_vertical, 
	object_state.prev.end_rot_speed_vertical );
      push( push_speed4_fw, end_rot_speed_roll, object_state.next.start_rot_speed_roll );
      push( push_speed4_bw, start_rot_speed_roll, object_state.prev.end_rot_speed_roll );

      push( push_state_non_urgent1_fw, end_up_norm, object_state.next.start_up_norm );
      push( push_state_non_urgent1_bw, start_up_norm, object_state.prev.end_up_norm );
      push( push_state_non_urgent2_fw, end_front, object_state.next.start_front );
      push( push_state_non_urgent2_bw, start_front, object_state.prev.end_front );
      push( push_state_non_urgent4_fw, end_up_vector, object_state.next.start_up_vector );
      push( push_state_non_urgent4_bw, start_up_vector, object_state.prev.end_up_vector );

      default( default_diff_speed, diff_speed, 0 );
      default( default_up_norm_roll, up_norm_roll, 0 );
      default( default_state, start_pos, vector(0,0,0) );
      default( default_state_post, start_dir, vector(1,0,0) );

      default( default_state_2x_post, start_front, vector(1,0,0) );
      default( default_state_2x_post2, start_up_vector, vector(0,1,0) );
    }
  }
  first object_state 
  {
    actions 
    {
      default( default_initial, auto_rotate, flag(1) ); /*true*/
      default( default_first_time, start_time, 0 );
      default( default_first_length, start_length, 0 );
      default( default_first_state_pre1, start_rot_horizontal, 0 );
      default( default_first_state_pre2, start_rot_vertical, 0 );
      default( default_first_state_pre3, start_rot_roll, 0 );
      default( default_first_up_norm, start_up_norm_try, vector(0,1,0) );
      default( default_first_state, start_pos, vector(0,0,0) );
    }
  }
}

node move_straight extends object_subfunc_base 
{
  properties
  {
    scalar acceleration;
  }
  common
  {
    solvers
    {
      accel_solver(length, duration, acceleration, start_speed, end_speed);
      product_solver(diff_speed, acceleration, duration);
    }
  }
  provide object_state
  {
// track
    resulting position( time _t ) 
      requires  start_time, start_speed, acceleration, length,
    start_pos, end_pos
    {
      scalar x,t,s;
      t = (_t - [[ start_time ]]);    // local time
      s = [[ start_speed ]] * t + 0.5 * [[ acceleration ]] * t * t;
      if( [[ length ]] )
        x = s / [[ length ]];   // relative stretch
      else
        x = 0;
      vector pos = [[ start_pos ]] * (1-x) + [[ end_pos ]] * x; // linear interpolation
      [[ return pos ]];
    }
    resulting position( stretch _s ) 
      requires start_length, length, start_pos, end_pos
    {
      scalar x,s;
      s = (_s - [[ start_length ]]);  // local stretch
      if( [[ length ]] )
        x = s / [[ length ]];   // relative stretch
      else
        x = 0;
      vector pos = [[ start_pos ]] * (1-x) + [[ end_pos ]] * x; // linear interpolation
      [[ return pos ]];
    }
    resulting direction( time _t ) 
      requires start_dir
    {
      [[ return_prop start_dir ]];
    }
    resulting direction( stretch _s ) 
      requires start_dir
    {
      [[ return_prop start_dir ]];
    }
// timing 
    resulting stretch( time _t ) 
      requires start_time, start_speed, acceleration
    {
      scalar x,t,s;
      t = (_t - [[ start_time ]]);    // local time
      s = [[ start_speed ]] * t + 0.5 * [[ acceleration ]] * t * t;
      [[ return s ]];
    }
    resulting speed( time _t ) 
      requires start_time, start_speed, acceleration
    {
      scalar t,v;
      t = (_t - [[ start_time ]]);    // local time
      v = [[ start_speed ]] + [[ acceleration ]] * t;
      [[ return v ]];
    }
    resulting speed( stretch _s ) 
      requires start_length, acceleration, start_speed
    {
      scalar s,v;
      s = (_s - [[ start_length ]]);
      v = sqrt( 2 * [[ acceleration ]] * s + [[ start_speed ]] );
      [[ return v ]];
    }
    resulting acceleration( time _t ) 
      requires acceleration
    {
      [[ return_prop acceleration ]];
    }
    resulting acceleration( stretch _s ) 
      requires acceleration
    {
      [[ return_prop acceleration ]];
    }
// orientation on track
    resulting front( time _t ) 
      requires start_time, start_front, end_front, duration
    {
      scalar x,t;
      t = (_t - [[ start_time ]]);    // local time
      if( [[ duration ]] )
        x = t / [[ duration ]];   // relative state
      else
        x = 0;
      vector res = [[ start_front ]] * (1-x) + [[ end_front ]] * x;
      [[ return res ]];
    }
    resulting front( stretch _s ) 
      requires  start_length, acceleration, length, start_speed, duration,
    start_front, end_front
    {
      scalar x,t,s,d;
      s = (_s - [[ start_length ]]);
      if( [[ acceleration ]] == 0 )   // is stretch proportional to time
      {
  if( [[ length ]] )
    x = s / [[ length ]];   // relative stretch
  else
    x = 0;
      }
      else        // else calc time first
      {
  // t = (-v0 + sqrt(v0^2 - 2as)) / a
  d = sqrt([[ start_speed ]]*[[ start_speed ]] - 2 * [[ acceleration ]] * s);
  t = (- [[ start_speed ]] + d) / [[ acceleration ]];
  if( [[ duration ]] )
    x = t / [[ duration ]];   // relative state
        else
          x = 0;
      }
      vector res = [[ start_front ]] * (1-x) + [[ end_front ]] * x;
      [[ return res ]];
    }
    resulting up_vector( time _t ) 
      requires start_time, start_up_vector, end_up_vector, duration
    {
      scalar x,t;
      t = (_t - [[ start_time ]]);    // local time
      if( [[ duration ]] )
        x = t / [[ duration ]];   // relative state
      else
        x = 0;
      vector res = [[ start_up_vector ]] * (1-x) + [[ end_up_vector ]] * x;
      [[ return res ]];
    }

    resulting up_vector( stretch _s ) 
      requires  start_length, acceleration, length, start_speed, duration,
    start_up_vector, end_up_vector
    {
      scalar x,t,s,d;
      s = (_s - [[ start_length ]]);
      if( [[ acceleration ]] == 0 )   // is stretch proportional to time
      {
  if( [[ length ]] )
    x = s / [[ length ]];   // relative stretch
  else
    x = 0;
      }
      else        // else calc time first
      {
  // t = (-v0 + sqrt(v0^2 - 2as)) / a
  d = sqrt([[ start_speed ]]*[[ start_speed ]] - 2 * [[ acceleration ]] * s);
  t = (- [[ start_speed ]] + d) / [[ acceleration ]];
  if( [[ duration ]] )
    x = t / [[ duration ]];   // relative state
        else
          x = 0;
      }
      vector res = [[ start_up_vector ]] * (1-x) + [[ end_up_vector ]] * x;
      [[ return res ]];
    }
  }
}



