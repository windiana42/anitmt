/*****************************************************************************/
/**   Specification of the AFD language                                     **/
/*****************************************************************************/
/**									    **/
/** Author: Martin Trautmann, Manuel Moser				    **/
/**									    **/
/** EMail:   martintrautmann@gmx.de					    **/
/**									    **/
/** License: GPL - free and without any warranty - read COPYING             **/
/**									    **/
/** Package: AniTMT							    **/
/**									    **/
/** Date: 20.2.2002							    **/
/**									    **/
/*****************************************************************************/

avoid_recursion <unique_identifier>;	// avoid recursion of this file

include declaration "<afdfile>";
include header "<hppfile>";

priority_list {				// declare priority level names
  highest_priority;
  lowest_level;
  push1;
  push2;
  default1;
  default2;
  lowest_priority;  
}

base_types {
  <newtype> = <cpp_identifier>;
  <newtype> = <oldtype>;
  <newtype> = { <oldtype> <name>, <oldtype> <name>,... };
}


[serial] type <ProviderType> {
  provides <ReturnType>(<ParameterType>);
  provides <ReturnType>(<ParameterType>);
  ...
}

// currently a node may be reopened! FIX?
[abstract] node <TreeNodeName> [extends <TreeNodeName> [, ...]] 
  [provides <ProviderType> [, ...]] 
// ignore multiple occurence of the same provided type?
{
  properties {
    // type scalar may be reopened!
    type scalar {
      <PropertyName>; 
      <PropertyName>; 
      ...
    }
    type vector {
      <PropertyName>;
      <PropertyName>; 
      ...
    }
    type string {
      <PropertyName>;
      <PropertyName>; 
      ...
    }
    scalar <PropertyName>; 
    string <PropertyName>; 
    vector <PropertyName>; 
    ...
  }
  aliases {
    <PropertyAliasName> = <PropertyName>;   // <PropertyAliasName> are only for users !!!
    ...
  }
  operands {
    type scalar {
      <OperandName>;  // BlindProperies (Not accessable by user)
      <OperandName>; 
      ...
    }
    type vector {
      <OperandName>;
      <OperandName>; 
      ...
    }
    type string {
      <OperandName>;
      <OperandName>; 
      ...
    }
    scalar <OperandName>; 
    string <OperandName>; 
    vector <OperandName>; 
    ...
  }
   
  common {
    constraints {
      <operand_boolexpression>;
      <operand_boolexpression>;
      ...
    }
    solvers {
      <Solvername> [ <SolverInstanceName> /*todo*/ ] ( <Propertyreference> | <constant> | <function_call>, ... );
      <PropertyName> = <operand_expression>;
      ...
    } 
    actions {
      default( <Prioritylevelname>, <Propertyreference>, <cpp_expression> );
      ...
      push( <Prioritylevelname>, <Propertyreference>, <Propertyreference> );
      ...
// allow further actions?
//      <ActionName> ( <Prioritylevel>, <Propertyreference>, <Propertyreference>, ... );
      ...
    }

    // Attention:
    //   currently only "push" and "equal_solver" allow one none local property
    //   reference
  }
  first [<ProviderType>]{
    constraints { ... }
    solvers { ... } 
    actions { ... }
  }
  last [<ProviderType>]{
    constraints { ... }
    solvers { ... } 
    actions { ... }
  }
  
  contains {
    [max1] [min1] <ProviderType>;
    [max1] [min1] <ProviderType>;
    ...
  }
   
  provide <ProviderType> {
    resulting <ReturnType>( <ParameterType> <ParameterName> ) 
// optional things are currently not implemented!
      [ requires <Propertyname> | child.<ProviderType>[.<ReturnType>(<ParameterType>)] | this.[<ProviderType>.]<ReturnType>(<ParameterType>) | <SolverInstanceName>.<FunctionName>/*todo*/, ... ] 
    {
      <Any C++-Code using 

<<<< in doubled square brackets("[[   ]]"):
// accepts [[ ... ] ] as well, as "]]" might occur in C-Code and shouldn't be
// a token

       <Propertyname>
//!!! rethink about all this references...
// default value and failvar isn't implemented yet
       child.<ProviderType>.<ReturnType>(<ParameterType> <Parameter>)[,<failboolvar>]
       [this./*todo*/][<ProviderType>./*todo*/]<ReturnType>(<ParameterType> <Parameter>)
       <SolverInstanceName>.<FunctionName>(<ParameterType> <Parameter>,...) /*todo*/
       return_prop <Propertyname>
       return <cpp_expression>
       return child.<ProviderType>.<ReturnType>(<ParameterType> <Parameter>) 
       return this.[<ProviderType>.]<ReturnType>(<ParameterType> <Parameter>)
       return_fail			// return undefined
       return_if_fail			// return if one function call failed
       ...
<<<< in doubled square brackets("[[   ]]") 

      // availible variables in C++ code:
       did_any_result_fail		// true: one previous result function
					// call failed
					// set to false to reinitalize
       did_result_fail			// default fail_bool_var
      >
    }
    ...
  }
}

/*
    **examples:**
      scalar x = [[start_time]] + 3;
      if( x > 5 )
        [[return x]];
      else
        [[return_prop end_time]];
*/

/* future example could look like
bool x_failed;
x = [[child.scalar_vsa.value(t),x_failed]];
if( x_failed )
{
  [[return_fail]];
}
*/

<Propertyreference>:    <PROPERTYNAME>
                      | <OPERANDNAME>
                      | <Nodereference>.<PROPERTYNAME>
                      | <PROVIDERTYPE>.<RETURNTYPE>(<PARAMETERTYPE>).start_param   // range properties for result function
                      | <PROVIDERTYPE>.<RETURNTYPE>(<PARAMETERTYPE>).end_param                    
<Nodereference>:        <Localnodeidentifier>
                      | <Nodeidentifier>
                      | <Nodereference>.<Nodeidentifier>                           // recursive
<Localnodeidentifier>:  <PROVIDERTYPE>.prev                           // return type specific sequence
                      | <PROVIDERTYPE>.next                    
                      | child.<CHILDPROVIDERTYPE>.first                     
                      | child.<CHILDPROVIDERTYPE>.last
                      | child.<CHILDPROVIDERTYPE>[n]
<Nodeidentifier>:       prev
                      | next
                      | parent
                      | first_child
                      | last_child
                      | child[n]


<cpp_expression>: operators: +,-,*,/,|,&,^,==,!=,<=,>= //!!! implement more !!!

// ************************************************
// operator and solver definitions
// ************************************************

operators
{
  <OperatorType> <OperatorName> 
  {
    <FunctionName>( <ParameterName>,...)
    {
      <CPP code returning value>
    }
    versions
    {
      <ReturnType> <VersionName>( <ParameterType>,...);
      <ReturnType> operator <CommonOperator>( <ParameterType>,...);
      ...
    }
  }
  /* example:
  two_operands_operator equal
  {
    calc_result( op1, op2 )
    {
      return op1 == op2;
    }
    versions
    {
      flag equal     ( scalar, scalar );
      flag operator==( flag, flag );
    }
  }
  */
}

solvers /*todo*/
{
  <SolverName> ( <Type> <OperandName>, ... )
  {
    operands				// local operands
    {
      type <Type> 
      {
	<OperandName>;  
	...
      }
      <Type> <OperandName>; 
      ...
    }
    declarations
    {
      <C++ClassType> <ObjectName>,...;
      ...
    }
    init
    {
      <SolverName> [ <SolverInstanceName> ]( <OperandName>, ... );
      <OperandName> = <operand_expression>;
//      <ObjectName>.[<SubObjectName>.]*<FunctionName>( <cpp_expression>,... ); //???
      //				                   |
      //				   no operands (not solved?)
      ...
    }
    events
    {
      condition <OperandName> & <OperandName> & ... 
      {
	test_run 
	{ 
	  <C++ code> including... 
	  return <true/false>; or 
	  [[ test <OperandName> = <cpp_expression> ]];
	}
	[ final { <C++ code> } ] // useful?
	[ reset { <C++ code> } ]
      }
      ...
      group
      {
	condition <OperandName> & <OperandName> & ... 
	{
	  test_run 
	  { 
	    <C++ code> including... 
	    return <true/false>; or 
	    [[ test <OperandName> = <cpp_expression> ]];
	  }
	  [ final { <C++ code> } ] // useful?
	  [ reset { <C++ code> } ]
	}
	...
	// Operation is invoked by one operand being solved. 
	// if condition is mached and it's testrun was never executed:
	//     run testrun
	// if condition is mached, it's testrun was already executed 
	//   and one of the operands invoked the operation:
	//     reset and clear all marks for executed testruns and invoke again
	[ reset { } ]

	//!! attention: group reset which is caused by a member condition 
	//   within it's test run may cause an infinite loop !!
      }

      ...
    }
    provide
    {
      <ReturnType> <FunctionName> ( <Type> <Variable>,... ) 
        [ requires <OperandName> | this.<FunctionName> 
	  | <SolverInstanceName>.<FunctionName> , ... ]
      {
	<C++ code returning value, using <Variable>s and <ObjectName>s>
      }
      ...
    }
  }
}