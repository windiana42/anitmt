State 454 conflicts: 1 shift/reduce
State 455 conflicts: 1 shift/reduce


Grammar

    0 $accept: STARTEXPR $end

    1 literal: "[integer]"
    2        | "[scalar]"
    3        | "[string]"

    4 identifier: "[identifier]"

    5 name_notabs: identifier
    6            | identifier "::" name

    7 name: name_notabs
    8     | "::" name_notabs

    9 builtin_name_raw: "this"

   10 builtin_name: builtin_name_raw

   11 vector: '<' expr_list_ne '>'

   12 array_expr_list: expr_list_ne
   13                | ',' expr_list_ne
   14                | expr_list_ne ','
   15                | ',' expr_list_ne ','

   16 array: '{' array_expr_list '}'
   17      | '{' '.' '}'

   18 primary_expr: literal
   19             | vector
   20             | array
   21             | name
   22             | builtin_name
   23             | '(' expr ')'
   24             | "NULL"

   25 postfix_expr: primary_expr
   26             | postfix_expr '[' expr ']'
   27             | postfix_expr '[' error ']'
   28             | postfix_expr '(' fcall_expr_list ')'
   29             | postfix_expr '(' error ')'
   30             | pod_type_name '(' expr ')'
   31             | postfix_expr '.' name
   32             | postfix_expr '.' builtin_name
   33             | postfix_expr "->" name
   34             | postfix_expr "->" builtin_name
   35             | postfix_expr "++"
   36             | postfix_expr "--"

   37 unary_op: '+'
   38         | '-'
   39         | '!'

   40 new_array_spec: type_name '[' expr ']'
   41               | new_array_spec bracket_bracket
   42               | new_array_spec '[' expr ']'
   43               | new_array_spec '[' error ']'

   44 unary_expr: postfix_expr
   45           | "++" unary_expr
   46           | "--" unary_expr
   47           | unary_op unary_expr
   48           | "new" name '(' fcall_expr_list ')'
   49           | "new" new_array_spec
   50           | "delete" unary_expr

   51 binary_expr: unary_expr
   52            | binary_expr '^' binary_expr
   53            | binary_expr '*' binary_expr
   54            | binary_expr '/' binary_expr
   55            | binary_expr '%' binary_expr
   56            | binary_expr '+' binary_expr
   57            | binary_expr '-' binary_expr
   58            | binary_expr '<' binary_expr
   59            | '(' binary_expr '>' binary_expr ')'
   60            | binary_expr "> " binary_expr
   61            | binary_expr "<=" binary_expr
   62            | binary_expr ">=" binary_expr
   63            | binary_expr "==" binary_expr
   64            | binary_expr "!=" binary_expr
   65            | binary_expr "&&" binary_expr
   66            | binary_expr "||" binary_expr

   67 cond_expr: binary_expr
   68          | binary_expr '?' expr ':' cond_expr
   69          | binary_expr '?' ':' cond_expr

   70 range_expr: cond_expr
   71           | cond_expr ".." cond_expr
   72           | ".." cond_expr
   73           | cond_expr ".."

   74 expr: range_expr

   75 expr_list_ne: expr
   76             | expr_list_ne ',' expr
   77             | error ',' expr
   78             | expr_list_ne ',' error ',' expr

   79 fcall_expr_list_ent: initializer
   80                    | name '=' initializer

   81 fcall_expr_list_ne: fcall_expr_list_ent
   82                   | fcall_expr_list_ne ',' fcall_expr_list_ent
   83                   | error ',' expr
   84                   | fcall_expr_list_ne ',' error ',' fcall_expr_list_ent

   85 fcall_expr_list: /* empty */
   86                | fcall_expr_list_ne

   87 pod_type_name: "int"
   88              | "scalar"
   89              | "range"
   90              | "vector"
   91              | "vector" '<' expr '>'
   92              | "matrix"
   93              | "matrix" '<' expr ',' expr '>'
   94              | "string"

   95 type_name: pod_type_name
   96          | name
   97          | "anyobj"

   98 bracket_bracket: '[' ']'

   99 array_spec: bracket_bracket
  100           | array_spec bracket_bracket

  101 initializer: expr
  102            | '{' '}'

  103 declarator_noinit: name_notabs
  104                  | declarator_noinit '[' expr ']'
  105                  | declarator_noinit '[' error ']'
  106                  | declarator_noinit '[' ']'

  107 declarator: declarator_noinit
  108           | declarator_noinit '=' initializer

  109 declarator_list_ne: declarator
  110                   | declarator_list_ne ',' declarator
  111                   | error ',' declarator
  112                   | declarator_list_ne ',' error ',' declarator

  113 decl_stmt_nonstatic: type_name declarator_list_ne ';'
  114                    | "const" type_name declarator_list_ne ';'

  115 decl_stmt: decl_stmt_nonstatic
  116          | "static" decl_stmt_nonstatic

  117 compound_stmt: '{' statement_list '}'
  118              | '{' error '}'

  119 selection_stmt: "if" '(' expr ')' statement
  120               | "if" '(' error ')' statement
  121               | "if" '(' expr ')' statement "else" statement
  122               | "if" '(' error ')' statement "else" statement

  123 _for_init_stmt: expr_stmt
  124               | assign_stmt
  125               | decl_stmt

  126 _for_inc_stmt: /* empty */
  127              | expr
  128              | assignment

  129 iteration_stmt: "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | "while" '(' expr ')' statement
  131               | "while" '(' error ')' statement
  132               | "do" statement "while" '(' expr ')' ';'
  133               | "do" statement "while" '(' error ')' ';'

  134 jump_stmt: "break" ';'
  135          | "return" expr ';'
  136          | "return" ';'

  137 assign_op: '='
  138          | "+="
  139          | "-="
  140          | "*="
  141          | "/="

  142 assignment: unary_expr assign_op initializer

  143 assign_stmt: assignment ';'

  144 expr_stmt: ';'
  145          | expr ';'

  146 ani_stmt: '%' ani_block ';'
  147         | '%' cond_expr ani_block ';'
  148         | '%' name ':' ani_block ';'
  149         | '%' name ':' cond_expr ani_block ';'

  150 statement: expr_stmt
  151          | assign_stmt
  152          | decl_stmt
  153          | compound_stmt
  154          | selection_stmt
  155          | iteration_stmt
  156          | jump_stmt
  157          | ani_stmt
  158          | error ';'

  159 statement_list_ne: statement
  160                  | statement_list_ne statement

  161 statement_list: /* empty */
  162               | statement_list_ne

  163 fdef_decl_list_ent: type_name declarator

  164 fdef_decl_list_ne: fdef_decl_list_ent
  165                  | fdef_decl_list_ne ',' fdef_decl_list_ent
  166                  | error ',' fdef_decl_list_ent
  167                  | fdef_decl_list_ne ',' error ',' fdef_decl_list_ent

  168 fdef_decl_list: /* empty */
  169               | fdef_decl_list_ne

  170 function_mod: /* empty */
  171             | "const"

  172 function_def_nonstatic: name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt

  175 function_def: function_def_nonstatic
  176             | "static" function_def_nonstatic

  177 obj_function_def: function_def
  178                 | "method" function_def
  179                 | '~' name_notabs '(' ')' compound_stmt

  180 object_body_ent: obj_function_def
  181                | decl_stmt

  182 object_body_ne: object_body_ent
  183               | object_body_ne object_body_ent

  184 object_body: /* empty */
  185            | object_body_ne

  186 object_def: "object" name '{' object_body '}'
  187           | "object" name '{' error '}'

  188 setting_body_ent: function_def
  189                 | decl_stmt
  190                 | object_def

  191 setting_body_ne: setting_body_ent
  192                | setting_body_ne setting_body_ent

  193 setting_body: /* empty */
  194             | setting_body_ne

  195 setting_def: "setting" name '{' setting_body '}'
  196            | "setting" name '{' error '}'

  197 animation_def: "animation" name compound_stmt

  198 typed_scope: identifier '{' typed_scope_list '}'
  199            | identifier name '{' typed_scope_list '}'
  200            | identifier '{' error '}'
  201            | identifier name '{' error '}'

  202 typed_scope_expr: typed_scope

  203 typed_scope_ent: typed_scope_expr
  204                | name '=' typed_scope_expr
  205                | expr ';'
  206                | name '=' expr ';'

  207 typed_scope_list_ne: typed_scope_ent
  208                    | typed_scope_list_ne typed_scope_ent

  209 typed_scope_list: /* empty */
  210                 | typed_scope_list_ne

  211 ani_block: '{' typed_scope_list '}'
  212          | '{' error '}'

  213 top_node: setting_def
  214         | object_def
  215         | function_def
  216         | decl_stmt
  217         | animation_def

  218 top_node_list_ne: top_node
  219                 | top_node_list_ne top_node
  220                 | top_node_list_ne error top_node

  221 top_node_list: /* empty */
  222              | top_node_list_ne

  223 animation: top_node_list

  224 pov_exprlist: /* empty */
  225             | pov_exprlist_ne

  226 pov_exprlist_ne: pov_expr
  227                | pov_exprlist_ne ',' pov_expr
  228                | error ',' pov_expr
  229                | pov_exprlist_ne ',' error ',' pov_expr

  230 @1: /* empty */

  231 pov_expr: @1 expr

  232 pov_assignment_list: /* empty */
  233                    | pov_assignment_list_ne

  234 pov_assignment_list_ne: pov_assignment_list_ent
  235                       | pov_assignment_list_ne ',' pov_assignment_list_ent
  236                       | error ',' pov_assignment_list_ent
  237                       | pov_assignment_list_ne ',' error ',' pov_assignment_list_ent

  238 pov_assignment_list_ent: name '=' pov_expr

  239 pov_object_entry: "macro" '=' name
  240                 | "declare" '=' name
  241                 | "params" '=' '{' pov_exprlist '}'
  242                 | "defs" '=' '{' pov_assignment_list '}'
  243                 | "include" '=' '{' pov_exprlist '}'
  244                 | "type" '=' pov_expr
  245                 | "append_raw" '=' pov_expr

  246 pov_object_entry_list: pov_object_entry
  247                      | pov_object_entry_list ',' pov_object_entry
  248                      | error ',' pov_object_entry
  249                      | pov_object_entry_list ',' error ',' pov_object_entry

  250 pov_entry: '@' "@object" '(' pov_object_entry_list ')'
  251          | '@' "@fileID" '=' name

  252 pov_entry_list: /* empty */
  253               | pov_entry_list_ne
  254               | error

  255 pov_entry_list_ne: pov_entry
  256                  | pov_entry_list_ne pov_entry
  257                  | error pov_entry
  258                  | pov_entry_list_ne error pov_entry

  259 STARTEXPR: TSS_ANIMATON animation
  260          | TSS_EXPR expr
  261          | TSS_POV_ENTRY pov_entry_list


Terminals, with rules where they appear

$end (0) 0
'!' (33) 39
'%' (37) 55 146 147 148 149
'(' (40) 23 28 29 30 48 59 119 120 121 122 129 130 131 132 133 172
    173 174 179 250
')' (41) 23 28 29 30 48 59 119 120 121 122 129 130 131 132 133 172
    173 174 179 250
'*' (42) 53
'+' (43) 37 56
',' (44) 13 14 15 76 77 78 82 83 84 93 110 111 112 165 166 167 227
    228 229 235 236 237 247 248 249
'-' (45) 38 57
'.' (46) 17 31 32
'/' (47) 54
':' (58) 68 69 148 149
';' (59) 113 114 132 133 134 135 136 143 144 145 146 147 148 149 158
    205 206
'<' (60) 11 58 91 93
'=' (61) 80 108 137 204 206 238 239 240 241 242 243 244 245 251
'>' (62) 11 59 91 93
'?' (63) 68 69
'@' (64) 250 251
'[' (91) 26 27 40 42 43 98 104 105 106
']' (93) 26 27 40 42 43 98 104 105 106
'^' (94) 52
'{' (123) 16 17 102 117 118 186 187 195 196 198 199 200 201 211 212
    241 242 243
'}' (125) 16 17 102 117 118 186 187 195 196 198 199 200 201 211 212
    241 242 243
'~' (126) 179
error (256) 27 29 43 77 78 83 84 105 111 112 118 120 122 131 133 158
    166 167 187 196 200 201 212 220 228 229 236 237 248 249 254 257
    258
TSS_ANIMATON (258) 259
TSS_EXPR (259) 260
TSS_POV_ENTRY (260) 261
"[integer]" (261) 1
"[scalar]" (262) 2
"[string]" (263) 3
"[identifier]" (264) 4
"new" (265) 48 49
"delete" (266) 50
"if" (267) 119 120 121 122
"else" (268) 121 122
"for" (269) 129
"do" (270) 132 133
"while" (271) 130 131 132 133
"break" (272) 134
"return" (273) 135 136
"const" (274) 114 171
"static" (275) 116 176
"int" (276) 87
"scalar" (277) 88
"range" (278) 89
"vector" (279) 90 91
"matrix" (280) 92 93
"string" (281) 94
"anyobj" (282) 97
"object" (283) 186 187
"method" (284) 178
"setting" (285) 195 196
"animation" (286) 197
"this" (287) 9
"NULL" (288) 24
"++" (289) 35 45
"--" (290) 36 46
"->" (291) 33 34
"::" (292) 6 8
"+=" (293) 138
"-=" (294) 139
"*=" (295) 140
"/=" (296) 141
".." (297) 71 72 73
"||" (298) 66
"&&" (299) 65
"==" (300) 63
"!=" (301) 64
"<=" (302) 61
">=" (303) 62
"> " (304) 60
"@object" (305) 250
"params" (306) 241
"defs" (307) 242
"macro" (308) 239
"declare" (309) 240
"include" (310) 243
"type" (311) 244
"append_raw" (312) 245
"@fileID" (313) 251


Nonterminals, with rules where they appear

$accept (82)
    on left: 0
literal (83)
    on left: 1 2 3, on right: 18
identifier (84)
    on left: 4, on right: 5 6 198 199 200 201
name_notabs (85)
    on left: 5 6, on right: 7 8 103 172 173 174 179
name (86)
    on left: 7 8, on right: 6 21 31 33 48 80 96 148 149 186 187 195
    196 197 199 201 204 206 238 239 240 251
builtin_name_raw (87)
    on left: 9, on right: 10
builtin_name (88)
    on left: 10, on right: 22 32 34
vector (89)
    on left: 11, on right: 19
array_expr_list (90)
    on left: 12 13 14 15, on right: 16
array (91)
    on left: 16 17, on right: 20
primary_expr (92)
    on left: 18 19 20 21 22 23 24, on right: 25
postfix_expr (93)
    on left: 25 26 27 28 29 30 31 32 33 34 35 36, on right: 26 27 28
    29 31 32 33 34 35 36 44
unary_op (94)
    on left: 37 38 39, on right: 47
new_array_spec (95)
    on left: 40 41 42 43, on right: 41 42 43 49
unary_expr (96)
    on left: 44 45 46 47 48 49 50, on right: 45 46 47 50 51 142
binary_expr (97)
    on left: 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66,
    on right: 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
cond_expr (98)
    on left: 67 68 69, on right: 68 69 70 71 72 73 147 149
range_expr (99)
    on left: 70 71 72 73, on right: 74
expr (100)
    on left: 74, on right: 23 26 30 40 42 68 75 76 77 78 83 91 93 101
    104 119 121 127 130 132 135 145 205 206 231 260
expr_list_ne (101)
    on left: 75 76 77 78, on right: 11 12 13 14 15 76 78
fcall_expr_list_ent (102)
    on left: 79 80, on right: 81 82 84
fcall_expr_list_ne (103)
    on left: 81 82 83 84, on right: 82 84 86
fcall_expr_list (104)
    on left: 85 86, on right: 28 48
pod_type_name (105)
    on left: 87 88 89 90 91 92 93 94, on right: 30 95
type_name (106)
    on left: 95 96 97, on right: 40 113 114 163 173 174
bracket_bracket (107)
    on left: 98, on right: 41 99 100
array_spec (108)
    on left: 99 100, on right: 100 174
initializer (109)
    on left: 101 102, on right: 79 80 108 142
declarator_noinit (110)
    on left: 103 104 105 106, on right: 104 105 106 107 108
declarator (111)
    on left: 107 108, on right: 109 110 111 112 163
declarator_list_ne (112)
    on left: 109 110 111 112, on right: 110 112 113 114
decl_stmt_nonstatic (113)
    on left: 113 114, on right: 115 116
decl_stmt (114)
    on left: 115 116, on right: 125 152 181 189 216
compound_stmt (115)
    on left: 117 118, on right: 153 172 173 174 179 197
selection_stmt (116)
    on left: 119 120 121 122, on right: 154
_for_init_stmt (117)
    on left: 123 124 125, on right: 129
_for_inc_stmt (118)
    on left: 126 127 128, on right: 129
iteration_stmt (119)
    on left: 129 130 131 132 133, on right: 155
jump_stmt (120)
    on left: 134 135 136, on right: 156
assign_op (121)
    on left: 137 138 139 140 141, on right: 142
assignment (122)
    on left: 142, on right: 128 143
assign_stmt (123)
    on left: 143, on right: 124 151
expr_stmt (124)
    on left: 144 145, on right: 123 129 150
ani_stmt (125)
    on left: 146 147 148 149, on right: 157
statement (126)
    on left: 150 151 152 153 154 155 156 157 158, on right: 119 120
    121 122 129 130 131 132 133 159 160
statement_list_ne (127)
    on left: 159 160, on right: 160 162
statement_list (128)
    on left: 161 162, on right: 117
fdef_decl_list_ent (129)
    on left: 163, on right: 164 165 166 167
fdef_decl_list_ne (130)
    on left: 164 165 166 167, on right: 165 167 169
fdef_decl_list (131)
    on left: 168 169, on right: 172 173 174
function_mod (132)
    on left: 170 171, on right: 172 173 174
function_def_nonstatic (133)
    on left: 172 173 174, on right: 175 176
function_def (134)
    on left: 175 176, on right: 177 178 188 215
obj_function_def (135)
    on left: 177 178 179, on right: 180
object_body_ent (136)
    on left: 180 181, on right: 182 183
object_body_ne (137)
    on left: 182 183, on right: 183 185
object_body (138)
    on left: 184 185, on right: 186
object_def (139)
    on left: 186 187, on right: 190 214
setting_body_ent (140)
    on left: 188 189 190, on right: 191 192
setting_body_ne (141)
    on left: 191 192, on right: 192 194
setting_body (142)
    on left: 193 194, on right: 195
setting_def (143)
    on left: 195 196, on right: 213
animation_def (144)
    on left: 197, on right: 217
typed_scope (145)
    on left: 198 199 200 201, on right: 202
typed_scope_expr (146)
    on left: 202, on right: 203 204
typed_scope_ent (147)
    on left: 203 204 205 206, on right: 207 208
typed_scope_list_ne (148)
    on left: 207 208, on right: 208 210
typed_scope_list (149)
    on left: 209 210, on right: 198 199 211
ani_block (150)
    on left: 211 212, on right: 146 147 148 149
top_node (151)
    on left: 213 214 215 216 217, on right: 218 219 220
top_node_list_ne (152)
    on left: 218 219 220, on right: 219 220 222
top_node_list (153)
    on left: 221 222, on right: 223
animation (154)
    on left: 223, on right: 259
pov_exprlist (155)
    on left: 224 225, on right: 241 243
pov_exprlist_ne (156)
    on left: 226 227 228 229, on right: 225 227 229
pov_expr (157)
    on left: 231, on right: 226 227 228 229 238 244 245
@1 (158)
    on left: 230, on right: 231
pov_assignment_list (159)
    on left: 232 233, on right: 242
pov_assignment_list_ne (160)
    on left: 234 235 236 237, on right: 233 235 237
pov_assignment_list_ent (161)
    on left: 238, on right: 234 235 236 237
pov_object_entry (162)
    on left: 239 240 241 242 243 244 245, on right: 246 247 248 249
pov_object_entry_list (163)
    on left: 246 247 248 249, on right: 247 249 250
pov_entry (164)
    on left: 250 251, on right: 255 256 257 258
pov_entry_list (165)
    on left: 252 253 254, on right: 261
pov_entry_list_ne (166)
    on left: 255 256 257 258, on right: 253 256 258
STARTEXPR (167)
    on left: 259 260 261, on right: 0


state 0

    0 $accept: . STARTEXPR $end
  259 STARTEXPR: . TSS_ANIMATON animation
  260          | . TSS_EXPR expr
  261          | . TSS_POV_ENTRY pov_entry_list

    TSS_ANIMATON   shift, and go to state 1
    TSS_EXPR       shift, and go to state 2
    TSS_POV_ENTRY  shift, and go to state 3

    STARTEXPR  go to state 4


state 1

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  175 function_def: . function_def_nonstatic
  176             | . "static" function_def_nonstatic
  186 object_def: . "object" name '{' object_body '}'
  187           | . "object" name '{' error '}'
  195 setting_def: . "setting" name '{' setting_body '}'
  196            | . "setting" name '{' error '}'
  197 animation_def: . "animation" name compound_stmt
  213 top_node: . setting_def
  214         | . object_def
  215         | . function_def
  216         | . decl_stmt
  217         | . animation_def
  218 top_node_list_ne: . top_node
  219                 | . top_node_list_ne top_node
  220                 | . top_node_list_ne error top_node
  221 top_node_list: .  [$end]
  222              | . top_node_list_ne
  223 animation: . top_node_list
  259 STARTEXPR: TSS_ANIMATON . animation

    "[identifier]"  shift, and go to state 5
    "const"         shift, and go to state 6
    "static"        shift, and go to state 7
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "object"        shift, and go to state 15
    "setting"       shift, and go to state 16
    "animation"     shift, and go to state 17
    "::"            shift, and go to state 18

    $default  reduce using rule 221 (top_node_list)

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 23
    decl_stmt_nonstatic     go to state 24
    decl_stmt               go to state 25
    function_def_nonstatic  go to state 26
    function_def            go to state 27
    object_def              go to state 28
    setting_def             go to state 29
    animation_def           go to state 30
    top_node                go to state 31
    top_node_list_ne        go to state 32
    top_node_list           go to state 33
    animation               go to state 34


state 2

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  260 STARTEXPR: TSS_EXPR . expr

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 65
    pod_type_name     go to state 66


state 3

  250 pov_entry: . '@' "@object" '(' pov_object_entry_list ')'
  251          | . '@' "@fileID" '=' name
  252 pov_entry_list: .  [$end]
  253               | . pov_entry_list_ne
  254               | . error
  255 pov_entry_list_ne: . pov_entry
  256                  | . pov_entry_list_ne pov_entry
  257                  | . error pov_entry
  258                  | . pov_entry_list_ne error pov_entry
  261 STARTEXPR: TSS_POV_ENTRY . pov_entry_list

    error  shift, and go to state 67
    '@'    shift, and go to state 68

    $end  reduce using rule 252 (pov_entry_list)

    pov_entry          go to state 69
    pov_entry_list     go to state 70
    pov_entry_list_ne  go to state 71


state 4

    0 $accept: STARTEXPR . $end

    $end  shift, and go to state 72


state 5

    4 identifier: "[identifier]" .

    $default  reduce using rule 4 (identifier)


state 6

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  114 decl_stmt_nonstatic: "const" . type_name declarator_list_ne ';'

    "[identifier]"  shift, and go to state 5
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    identifier     go to state 19
    name_notabs    go to state 52
    name           go to state 21
    pod_type_name  go to state 22
    type_name      go to state 73


state 7

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  116 decl_stmt: "static" . decl_stmt_nonstatic
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  176 function_def: "static" . function_def_nonstatic

    "[identifier]"  shift, and go to state 5
    "const"         shift, and go to state 6
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 23
    decl_stmt_nonstatic     go to state 74
    function_def_nonstatic  go to state 75


state 8

   87 pod_type_name: "int" .

    $default  reduce using rule 87 (pod_type_name)


state 9

   88 pod_type_name: "scalar" .

    $default  reduce using rule 88 (pod_type_name)


state 10

   89 pod_type_name: "range" .

    $default  reduce using rule 89 (pod_type_name)


state 11

   90 pod_type_name: "vector" .  [error, "[identifier]", '(', '[']
   91              | "vector" . '<' expr '>'

    '<'  shift, and go to state 76

    $default  reduce using rule 90 (pod_type_name)


state 12

   92 pod_type_name: "matrix" .  [error, "[identifier]", '(', '[']
   93              | "matrix" . '<' expr ',' expr '>'

    '<'  shift, and go to state 77

    $default  reduce using rule 92 (pod_type_name)


state 13

   94 pod_type_name: "string" .

    $default  reduce using rule 94 (pod_type_name)


state 14

   97 type_name: "anyobj" .

    $default  reduce using rule 97 (type_name)


state 15

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  186 object_def: "object" . name '{' object_body '}'
  187           | "object" . name '{' error '}'

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier   go to state 19
    name_notabs  go to state 52
    name         go to state 78


state 16

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  195 setting_def: "setting" . name '{' setting_body '}'
  196            | "setting" . name '{' error '}'

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier   go to state 19
    name_notabs  go to state 52
    name         go to state 79


state 17

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  197 animation_def: "animation" . name compound_stmt

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier   go to state 19
    name_notabs  go to state 52
    name         go to state 80


state 18

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    8 name: "::" . name_notabs

    "[identifier]"  shift, and go to state 5

    identifier   go to state 19
    name_notabs  go to state 81


state 19

    5 name_notabs: identifier .  [$end, error, "[identifier]", "++", "--", "->", "+=", "-=", "*=", "/=", "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', '^', '.', ',', '{', '}', '(', ')', '[', ']', '=', ';', '@']
    6            | identifier . "::" name

    "::"  shift, and go to state 82

    $default  reduce using rule 5 (name_notabs)


state 20

    7 name: name_notabs .  [error, "[identifier]", '[']
  172 function_def_nonstatic: name_notabs . '(' fdef_decl_list ')' function_mod compound_stmt

    '('  shift, and go to state 83

    $default  reduce using rule 7 (name)


state 21

   96 type_name: name .

    $default  reduce using rule 96 (type_name)


state 22

   95 type_name: pod_type_name .

    $default  reduce using rule 95 (type_name)


state 23

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
   98 bracket_bracket: . '[' ']'
   99 array_spec: . bracket_bracket
  100           | . array_spec bracket_bracket
  103 declarator_noinit: . name_notabs
  104                  | . declarator_noinit '[' expr ']'
  105                  | . declarator_noinit '[' error ']'
  106                  | . declarator_noinit '[' ']'
  107 declarator: . declarator_noinit
  108           | . declarator_noinit '=' initializer
  109 declarator_list_ne: . declarator
  110                   | . declarator_list_ne ',' declarator
  111                   | . error ',' declarator
  112                   | . declarator_list_ne ',' error ',' declarator
  113 decl_stmt_nonstatic: type_name . declarator_list_ne ';'
  173 function_def_nonstatic: type_name . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | type_name . array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt

    error           shift, and go to state 84
    "[identifier]"  shift, and go to state 5
    '['             shift, and go to state 85

    identifier          go to state 19
    name_notabs         go to state 86
    bracket_bracket     go to state 87
    array_spec          go to state 88
    declarator_noinit   go to state 89
    declarator          go to state 90
    declarator_list_ne  go to state 91


state 24

  115 decl_stmt: decl_stmt_nonstatic .

    $default  reduce using rule 115 (decl_stmt)


state 25

  216 top_node: decl_stmt .

    $default  reduce using rule 216 (top_node)


state 26

  175 function_def: function_def_nonstatic .

    $default  reduce using rule 175 (function_def)


state 27

  215 top_node: function_def .

    $default  reduce using rule 215 (top_node)


state 28

  214 top_node: object_def .

    $default  reduce using rule 214 (top_node)


state 29

  213 top_node: setting_def .

    $default  reduce using rule 213 (top_node)


state 30

  217 top_node: animation_def .

    $default  reduce using rule 217 (top_node)


state 31

  218 top_node_list_ne: top_node .

    $default  reduce using rule 218 (top_node_list_ne)


state 32

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  175 function_def: . function_def_nonstatic
  176             | . "static" function_def_nonstatic
  186 object_def: . "object" name '{' object_body '}'
  187           | . "object" name '{' error '}'
  195 setting_def: . "setting" name '{' setting_body '}'
  196            | . "setting" name '{' error '}'
  197 animation_def: . "animation" name compound_stmt
  213 top_node: . setting_def
  214         | . object_def
  215         | . function_def
  216         | . decl_stmt
  217         | . animation_def
  219 top_node_list_ne: top_node_list_ne . top_node
  220                 | top_node_list_ne . error top_node
  222 top_node_list: top_node_list_ne .  [$end]

    error           shift, and go to state 92
    "[identifier]"  shift, and go to state 5
    "const"         shift, and go to state 6
    "static"        shift, and go to state 7
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "object"        shift, and go to state 15
    "setting"       shift, and go to state 16
    "animation"     shift, and go to state 17
    "::"            shift, and go to state 18

    $end  reduce using rule 222 (top_node_list)

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 23
    decl_stmt_nonstatic     go to state 24
    decl_stmt               go to state 25
    function_def_nonstatic  go to state 26
    function_def            go to state 27
    object_def              go to state 28
    setting_def             go to state 29
    animation_def           go to state 30
    top_node                go to state 93


state 33

  223 animation: top_node_list .

    $default  reduce using rule 223 (animation)


state 34

  259 STARTEXPR: TSS_ANIMATON animation .

    $default  reduce using rule 259 (STARTEXPR)


state 35

    1 literal: "[integer]" .

    $default  reduce using rule 1 (literal)


state 36

    2 literal: "[scalar]" .

    $default  reduce using rule 2 (literal)


state 37

    3 literal: "[string]" .

    $default  reduce using rule 3 (literal)


state 38

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   40 new_array_spec: . type_name '[' expr ']'
   41               | . new_array_spec bracket_bracket
   42               | . new_array_spec '[' expr ']'
   43               | . new_array_spec '[' error ']'
   48 unary_expr: "new" . name '(' fcall_expr_list ')'
   49           | "new" . new_array_spec
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"

    "[identifier]"  shift, and go to state 5
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    identifier      go to state 19
    name_notabs     go to state 52
    name            go to state 94
    new_array_spec  go to state 95
    pod_type_name   go to state 22
    type_name       go to state 96


state 39

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   50           | "delete" . unary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 97
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 98
    pod_type_name     go to state 66


state 40

    9 builtin_name_raw: "this" .

    $default  reduce using rule 9 (builtin_name_raw)


state 41

   24 primary_expr: "NULL" .

    $default  reduce using rule 24 (primary_expr)


state 42

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   45           | "++" . unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 97
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 99
    pod_type_name     go to state 66


state 43

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   46           | "--" . unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 97
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 100
    pod_type_name     go to state 66


state 44

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   72 range_expr: ".." . cond_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 101
    pod_type_name     go to state 66


state 45

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   11       | '<' . expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   75 expr_list_ne: . expr
   76             | . expr_list_ne ',' expr
   77             | . error ',' expr
   78             | . expr_list_ne ',' error ',' expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    error           shift, and go to state 102
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 103
    expr_list_ne      go to state 104
    pod_type_name     go to state 66


state 46

   37 unary_op: '+' .

    $default  reduce using rule 37 (unary_op)


state 47

   38 unary_op: '-' .

    $default  reduce using rule 38 (unary_op)


state 48

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   12 array_expr_list: . expr_list_ne
   13                | . ',' expr_list_ne
   14                | . expr_list_ne ','
   15                | . ',' expr_list_ne ','
   16 array: . '{' array_expr_list '}'
   16      | '{' . array_expr_list '}'
   17      | . '{' '.' '}'
   17      | '{' . '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   75 expr_list_ne: . expr
   76             | . expr_list_ne ',' expr
   77             | . error ',' expr
   78             | . expr_list_ne ',' error ',' expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    error           shift, and go to state 102
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '.'             shift, and go to state 105
    ','             shift, and go to state 106
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array_expr_list   go to state 107
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 103
    expr_list_ne      go to state 108
    pod_type_name     go to state 66


state 49

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   23             | '(' . expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   59            | '(' . binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 109
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 110
    pod_type_name     go to state 66


state 50

   39 unary_op: '!' .

    $default  reduce using rule 39 (unary_op)


state 51

   18 primary_expr: literal .

    $default  reduce using rule 18 (primary_expr)


state 52

    7 name: name_notabs .

    $default  reduce using rule 7 (name)


state 53

   21 primary_expr: name .

    $default  reduce using rule 21 (primary_expr)


state 54

   10 builtin_name: builtin_name_raw .

    $default  reduce using rule 10 (builtin_name)


state 55

   22 primary_expr: builtin_name .

    $default  reduce using rule 22 (primary_expr)


state 56

   19 primary_expr: vector .

    $default  reduce using rule 19 (primary_expr)


state 57

   20 primary_expr: array .

    $default  reduce using rule 20 (primary_expr)


state 58

   25 postfix_expr: primary_expr .

    $default  reduce using rule 25 (postfix_expr)


state 59

   26 postfix_expr: postfix_expr . '[' expr ']'
   27             | postfix_expr . '[' error ']'
   28             | postfix_expr . '(' fcall_expr_list ')'
   29             | postfix_expr . '(' error ')'
   31             | postfix_expr . '.' name
   32             | postfix_expr . '.' builtin_name
   33             | postfix_expr . "->" name
   34             | postfix_expr . "->" builtin_name
   35             | postfix_expr . "++"
   36             | postfix_expr . "--"
   44 unary_expr: postfix_expr .  [$end, "+=", "-=", "*=", "/=", "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', '^', ',', '{', '}', ')', ']', '=', ';']

    "++"  shift, and go to state 111
    "--"  shift, and go to state 112
    "->"  shift, and go to state 113
    '.'   shift, and go to state 114
    '('   shift, and go to state 115
    '['   shift, and go to state 116

    $default  reduce using rule 44 (unary_expr)


state 60

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   47           | unary_op . unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 97
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 117
    pod_type_name     go to state 66


state 61

   51 binary_expr: unary_expr .

    $default  reduce using rule 51 (binary_expr)


state 62

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr
   67 cond_expr: binary_expr .  [$end, "..", '>', ':', ',', '{', '}', ')', ']', ';']
   68          | binary_expr . '?' expr ':' cond_expr
   69          | binary_expr . '?' ':' cond_expr

    "||"  shift, and go to state 118
    "&&"  shift, and go to state 119
    "=="  shift, and go to state 120
    "!="  shift, and go to state 121
    "<="  shift, and go to state 122
    ">="  shift, and go to state 123
    "> "  shift, and go to state 124
    '?'   shift, and go to state 125
    '<'   shift, and go to state 126
    '+'   shift, and go to state 127
    '-'   shift, and go to state 128
    '*'   shift, and go to state 129
    '/'   shift, and go to state 130
    '%'   shift, and go to state 131
    '^'   shift, and go to state 132

    $default  reduce using rule 67 (cond_expr)


state 63

   70 range_expr: cond_expr .  [$end, '>', ':', ',', '}', ')', ']', ';']
   71           | cond_expr . ".." cond_expr
   73           | cond_expr . ".."

    ".."  shift, and go to state 133

    $default  reduce using rule 70 (range_expr)


state 64

   74 expr: range_expr .

    $default  reduce using rule 74 (expr)


state 65

  260 STARTEXPR: TSS_EXPR expr .

    $default  reduce using rule 260 (STARTEXPR)


state 66

   30 postfix_expr: pod_type_name . '(' expr ')'

    '('  shift, and go to state 134


state 67

  250 pov_entry: . '@' "@object" '(' pov_object_entry_list ')'
  251          | . '@' "@fileID" '=' name
  254 pov_entry_list: error .  [$end]
  257 pov_entry_list_ne: error . pov_entry

    '@'  shift, and go to state 68

    $default  reduce using rule 254 (pov_entry_list)

    pov_entry  go to state 135


state 68

  250 pov_entry: '@' . "@object" '(' pov_object_entry_list ')'
  251          | '@' . "@fileID" '=' name

    "@object"  shift, and go to state 136
    "@fileID"  shift, and go to state 137


state 69

  255 pov_entry_list_ne: pov_entry .

    $default  reduce using rule 255 (pov_entry_list_ne)


state 70

  261 STARTEXPR: TSS_POV_ENTRY pov_entry_list .

    $default  reduce using rule 261 (STARTEXPR)


state 71

  250 pov_entry: . '@' "@object" '(' pov_object_entry_list ')'
  251          | . '@' "@fileID" '=' name
  253 pov_entry_list: pov_entry_list_ne .  [$end]
  256 pov_entry_list_ne: pov_entry_list_ne . pov_entry
  258                  | pov_entry_list_ne . error pov_entry

    error  shift, and go to state 138
    '@'    shift, and go to state 68

    $end  reduce using rule 253 (pov_entry_list)

    pov_entry  go to state 139


state 72

    0 $accept: STARTEXPR $end .

    $default  accept


state 73

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
  103 declarator_noinit: . name_notabs
  104                  | . declarator_noinit '[' expr ']'
  105                  | . declarator_noinit '[' error ']'
  106                  | . declarator_noinit '[' ']'
  107 declarator: . declarator_noinit
  108           | . declarator_noinit '=' initializer
  109 declarator_list_ne: . declarator
  110                   | . declarator_list_ne ',' declarator
  111                   | . error ',' declarator
  112                   | . declarator_list_ne ',' error ',' declarator
  114 decl_stmt_nonstatic: "const" type_name . declarator_list_ne ';'

    error           shift, and go to state 84
    "[identifier]"  shift, and go to state 5

    identifier          go to state 19
    name_notabs         go to state 140
    declarator_noinit   go to state 89
    declarator          go to state 90
    declarator_list_ne  go to state 141


state 74

  116 decl_stmt: "static" decl_stmt_nonstatic .

    $default  reduce using rule 116 (decl_stmt)


state 75

  176 function_def: "static" function_def_nonstatic .

    $default  reduce using rule 176 (function_def)


state 76

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   91              | "vector" '<' . expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 142
    pod_type_name     go to state 66


state 77

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   93              | "matrix" '<' . expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 143
    pod_type_name     go to state 66


state 78

  186 object_def: "object" name . '{' object_body '}'
  187           | "object" name . '{' error '}'

    '{'  shift, and go to state 144


state 79

  195 setting_def: "setting" name . '{' setting_body '}'
  196            | "setting" name . '{' error '}'

    '{'  shift, and go to state 145


state 80

  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  197 animation_def: "animation" name . compound_stmt

    '{'  shift, and go to state 146

    compound_stmt  go to state 147


state 81

    8 name: "::" name_notabs .

    $default  reduce using rule 8 (name)


state 82

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    6            | identifier "::" . name
    7 name: . name_notabs
    8     | . "::" name_notabs

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier   go to state 19
    name_notabs  go to state 52
    name         go to state 148


state 83

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  163 fdef_decl_list_ent: . type_name declarator
  164 fdef_decl_list_ne: . fdef_decl_list_ent
  165                  | . fdef_decl_list_ne ',' fdef_decl_list_ent
  166                  | . error ',' fdef_decl_list_ent
  167                  | . fdef_decl_list_ne ',' error ',' fdef_decl_list_ent
  168 fdef_decl_list: .  [')']
  169               | . fdef_decl_list_ne
  172 function_def_nonstatic: name_notabs '(' . fdef_decl_list ')' function_mod compound_stmt

    error           shift, and go to state 149
    "[identifier]"  shift, and go to state 5
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    ')'  reduce using rule 168 (fdef_decl_list)

    identifier          go to state 19
    name_notabs         go to state 52
    name                go to state 21
    pod_type_name       go to state 22
    type_name           go to state 150
    fdef_decl_list_ent  go to state 151
    fdef_decl_list_ne   go to state 152
    fdef_decl_list      go to state 153


state 84

  111 declarator_list_ne: error . ',' declarator

    ','  shift, and go to state 154


state 85

   98 bracket_bracket: '[' . ']'

    ']'  shift, and go to state 155


state 86

  103 declarator_noinit: name_notabs .  [',', '[', '=', ';']
  173 function_def_nonstatic: type_name name_notabs . '(' fdef_decl_list ')' function_mod compound_stmt

    '('  shift, and go to state 156

    $default  reduce using rule 103 (declarator_noinit)


state 87

   99 array_spec: bracket_bracket .

    $default  reduce using rule 99 (array_spec)


state 88

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
   98 bracket_bracket: . '[' ']'
  100 array_spec: array_spec . bracket_bracket
  174 function_def_nonstatic: type_name array_spec . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt

    "[identifier]"  shift, and go to state 5
    '['             shift, and go to state 85

    identifier       go to state 19
    name_notabs      go to state 157
    bracket_bracket  go to state 158


state 89

  104 declarator_noinit: declarator_noinit . '[' expr ']'
  105                  | declarator_noinit . '[' error ']'
  106                  | declarator_noinit . '[' ']'
  107 declarator: declarator_noinit .  [',', ')', ';']
  108           | declarator_noinit . '=' initializer

    '['  shift, and go to state 159
    '='  shift, and go to state 160

    $default  reduce using rule 107 (declarator)


state 90

  109 declarator_list_ne: declarator .

    $default  reduce using rule 109 (declarator_list_ne)


state 91

  110 declarator_list_ne: declarator_list_ne . ',' declarator
  112                   | declarator_list_ne . ',' error ',' declarator
  113 decl_stmt_nonstatic: type_name declarator_list_ne . ';'

    ','  shift, and go to state 161
    ';'  shift, and go to state 162


state 92

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  175 function_def: . function_def_nonstatic
  176             | . "static" function_def_nonstatic
  186 object_def: . "object" name '{' object_body '}'
  187           | . "object" name '{' error '}'
  195 setting_def: . "setting" name '{' setting_body '}'
  196            | . "setting" name '{' error '}'
  197 animation_def: . "animation" name compound_stmt
  213 top_node: . setting_def
  214         | . object_def
  215         | . function_def
  216         | . decl_stmt
  217         | . animation_def
  220 top_node_list_ne: top_node_list_ne error . top_node

    "[identifier]"  shift, and go to state 5
    "const"         shift, and go to state 6
    "static"        shift, and go to state 7
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "object"        shift, and go to state 15
    "setting"       shift, and go to state 16
    "animation"     shift, and go to state 17
    "::"            shift, and go to state 18

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 23
    decl_stmt_nonstatic     go to state 24
    decl_stmt               go to state 25
    function_def_nonstatic  go to state 26
    function_def            go to state 27
    object_def              go to state 28
    setting_def             go to state 29
    animation_def           go to state 30
    top_node                go to state 163


state 93

  219 top_node_list_ne: top_node_list_ne top_node .

    $default  reduce using rule 219 (top_node_list_ne)


state 94

   48 unary_expr: "new" name . '(' fcall_expr_list ')'
   96 type_name: name .  ['[']

    '('  shift, and go to state 164

    $default  reduce using rule 96 (type_name)


state 95

   41 new_array_spec: new_array_spec . bracket_bracket
   42               | new_array_spec . '[' expr ']'
   43               | new_array_spec . '[' error ']'
   49 unary_expr: "new" new_array_spec .  [$end, "+=", "-=", "*=", "/=", "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', '^', ',', '{', '}', ')', ']', '=', ';']
   98 bracket_bracket: . '[' ']'

    '['  shift, and go to state 165

    $default  reduce using rule 49 (unary_expr)

    bracket_bracket  go to state 166


state 96

   40 new_array_spec: type_name . '[' expr ']'

    '['  shift, and go to state 167


state 97

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   23             | '(' . expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 110
    pod_type_name     go to state 66


state 98

   50 unary_expr: "delete" unary_expr .

    $default  reduce using rule 50 (unary_expr)


state 99

   45 unary_expr: "++" unary_expr .

    $default  reduce using rule 45 (unary_expr)


state 100

   46 unary_expr: "--" unary_expr .

    $default  reduce using rule 46 (unary_expr)


state 101

   72 range_expr: ".." cond_expr .

    $default  reduce using rule 72 (range_expr)


state 102

   77 expr_list_ne: error . ',' expr

    ','  shift, and go to state 168


state 103

   75 expr_list_ne: expr .

    $default  reduce using rule 75 (expr_list_ne)


state 104

   11 vector: '<' expr_list_ne . '>'
   76 expr_list_ne: expr_list_ne . ',' expr
   78             | expr_list_ne . ',' error ',' expr

    '>'  shift, and go to state 169
    ','  shift, and go to state 170


state 105

   17 array: '{' '.' . '}'

    '}'  shift, and go to state 171


state 106

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   13 array_expr_list: ',' . expr_list_ne
   15                | ',' . expr_list_ne ','
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   75 expr_list_ne: . expr
   76             | . expr_list_ne ',' expr
   77             | . error ',' expr
   78             | . expr_list_ne ',' error ',' expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    error           shift, and go to state 102
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 103
    expr_list_ne      go to state 172
    pod_type_name     go to state 66


state 107

   16 array: '{' array_expr_list . '}'

    '}'  shift, and go to state 173


state 108

   12 array_expr_list: expr_list_ne .  ['}']
   14                | expr_list_ne . ','
   76 expr_list_ne: expr_list_ne . ',' expr
   78             | expr_list_ne . ',' error ',' expr

    ','  shift, and go to state 174

    $default  reduce using rule 12 (array_expr_list)


state 109

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   59            | '(' binary_expr . '>' binary_expr ')'
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr
   67 cond_expr: binary_expr .  ["..", ')']
   68          | binary_expr . '?' expr ':' cond_expr
   69          | binary_expr . '?' ':' cond_expr

    "||"  shift, and go to state 118
    "&&"  shift, and go to state 119
    "=="  shift, and go to state 120
    "!="  shift, and go to state 121
    "<="  shift, and go to state 122
    ">="  shift, and go to state 123
    "> "  shift, and go to state 124
    '>'   shift, and go to state 175
    '?'   shift, and go to state 125
    '<'   shift, and go to state 126
    '+'   shift, and go to state 127
    '-'   shift, and go to state 128
    '*'   shift, and go to state 129
    '/'   shift, and go to state 130
    '%'   shift, and go to state 131
    '^'   shift, and go to state 132

    $default  reduce using rule 67 (cond_expr)


state 110

   23 primary_expr: '(' expr . ')'

    ')'  shift, and go to state 176


state 111

   35 postfix_expr: postfix_expr "++" .

    $default  reduce using rule 35 (postfix_expr)


state 112

   36 postfix_expr: postfix_expr "--" .

    $default  reduce using rule 36 (postfix_expr)


state 113

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   33 postfix_expr: postfix_expr "->" . name
   34             | postfix_expr "->" . builtin_name

    "[identifier]"  shift, and go to state 5
    "this"          shift, and go to state 40
    "::"            shift, and go to state 18

    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 177
    builtin_name_raw  go to state 54
    builtin_name      go to state 178


state 114

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   31 postfix_expr: postfix_expr '.' . name
   32             | postfix_expr '.' . builtin_name

    "[identifier]"  shift, and go to state 5
    "this"          shift, and go to state 40
    "::"            shift, and go to state 18

    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 179
    builtin_name_raw  go to state 54
    builtin_name      go to state 180


state 115

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   28             | postfix_expr '(' . fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   29             | postfix_expr '(' . error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   79 fcall_expr_list_ent: . initializer
   80                    | . name '=' initializer
   81 fcall_expr_list_ne: . fcall_expr_list_ent
   82                   | . fcall_expr_list_ne ',' fcall_expr_list_ent
   83                   | . error ',' expr
   84                   | . fcall_expr_list_ne ',' error ',' fcall_expr_list_ent
   85 fcall_expr_list: .  [')']
   86                | . fcall_expr_list_ne
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  101 initializer: . expr
  102            | . '{' '}'

    error           shift, and go to state 181
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 182
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    ')'  reduce using rule 85 (fcall_expr_list)

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 183
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 61
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 184
    fcall_expr_list_ent  go to state 185
    fcall_expr_list_ne   go to state 186
    fcall_expr_list      go to state 187
    pod_type_name        go to state 66
    initializer          go to state 188


state 116

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   26             | postfix_expr '[' . expr ']'
   27             | . postfix_expr '[' error ']'
   27             | postfix_expr '[' . error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    error           shift, and go to state 189
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 190
    pod_type_name     go to state 66


state 117

   47 unary_expr: unary_op unary_expr .

    $default  reduce using rule 47 (unary_expr)


state 118

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   66            | binary_expr "||" . binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 191
    pod_type_name     go to state 66


state 119

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   65            | binary_expr "&&" . binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 192
    pod_type_name     go to state 66


state 120

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   63            | binary_expr "==" . binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 193
    pod_type_name     go to state 66


state 121

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   64            | binary_expr "!=" . binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 194
    pod_type_name     go to state 66


state 122

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   61            | binary_expr "<=" . binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 195
    pod_type_name     go to state 66


state 123

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   62            | binary_expr ">=" . binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 196
    pod_type_name     go to state 66


state 124

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   60            | binary_expr "> " . binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 197
    pod_type_name     go to state 66


state 125

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   68          | binary_expr '?' . expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   69          | binary_expr '?' . ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    ':'             shift, and go to state 198
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 199
    pod_type_name     go to state 66


state 126

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   58            | binary_expr '<' . binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 200
    pod_type_name     go to state 66


state 127

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   56            | binary_expr '+' . binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 201
    pod_type_name     go to state 66


state 128

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   57            | binary_expr '-' . binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 202
    pod_type_name     go to state 66


state 129

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   53            | binary_expr '*' . binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 203
    pod_type_name     go to state 66


state 130

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   54            | binary_expr '/' . binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 204
    pod_type_name     go to state 66


state 131

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   55            | binary_expr '%' . binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 205
    pod_type_name     go to state 66


state 132

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   52            | binary_expr '^' . binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 206
    pod_type_name     go to state 66


state 133

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   71 range_expr: cond_expr ".." . cond_expr
   73           | cond_expr ".." .  [$end, '>', ':', ',', '}', ')', ']', ';']
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    $default  reduce using rule 73 (range_expr)

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 207
    pod_type_name     go to state 66


state 134

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   30             | pod_type_name '(' . expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 208
    pod_type_name     go to state 66


state 135

  257 pov_entry_list_ne: error pov_entry .

    $default  reduce using rule 257 (pov_entry_list_ne)


state 136

  250 pov_entry: '@' "@object" . '(' pov_object_entry_list ')'

    '('  shift, and go to state 209


state 137

  251 pov_entry: '@' "@fileID" . '=' name

    '='  shift, and go to state 210


state 138

  250 pov_entry: . '@' "@object" '(' pov_object_entry_list ')'
  251          | . '@' "@fileID" '=' name
  258 pov_entry_list_ne: pov_entry_list_ne error . pov_entry

    '@'  shift, and go to state 68

    pov_entry  go to state 211


state 139

  256 pov_entry_list_ne: pov_entry_list_ne pov_entry .

    $default  reduce using rule 256 (pov_entry_list_ne)


state 140

  103 declarator_noinit: name_notabs .

    $default  reduce using rule 103 (declarator_noinit)


state 141

  110 declarator_list_ne: declarator_list_ne . ',' declarator
  112                   | declarator_list_ne . ',' error ',' declarator
  114 decl_stmt_nonstatic: "const" type_name declarator_list_ne . ';'

    ','  shift, and go to state 161
    ';'  shift, and go to state 212


state 142

   91 pod_type_name: "vector" '<' expr . '>'

    '>'  shift, and go to state 213


state 143

   93 pod_type_name: "matrix" '<' expr . ',' expr '>'

    ','  shift, and go to state 214


state 144

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  175 function_def: . function_def_nonstatic
  176             | . "static" function_def_nonstatic
  177 obj_function_def: . function_def
  178                 | . "method" function_def
  179                 | . '~' name_notabs '(' ')' compound_stmt
  180 object_body_ent: . obj_function_def
  181                | . decl_stmt
  182 object_body_ne: . object_body_ent
  183               | . object_body_ne object_body_ent
  184 object_body: .  ['}']
  185            | . object_body_ne
  186 object_def: "object" name '{' . object_body '}'
  187           | "object" name '{' . error '}'

    error           shift, and go to state 215
    "[identifier]"  shift, and go to state 5
    "const"         shift, and go to state 6
    "static"        shift, and go to state 7
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "method"        shift, and go to state 216
    "::"            shift, and go to state 18
    '~'             shift, and go to state 217

    '}'  reduce using rule 184 (object_body)

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 23
    decl_stmt_nonstatic     go to state 24
    decl_stmt               go to state 218
    function_def_nonstatic  go to state 26
    function_def            go to state 219
    obj_function_def        go to state 220
    object_body_ent         go to state 221
    object_body_ne          go to state 222
    object_body             go to state 223


state 145

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  175 function_def: . function_def_nonstatic
  176             | . "static" function_def_nonstatic
  186 object_def: . "object" name '{' object_body '}'
  187           | . "object" name '{' error '}'
  188 setting_body_ent: . function_def
  189                 | . decl_stmt
  190                 | . object_def
  191 setting_body_ne: . setting_body_ent
  192                | . setting_body_ne setting_body_ent
  193 setting_body: .  ['}']
  194             | . setting_body_ne
  195 setting_def: "setting" name '{' . setting_body '}'
  196            | "setting" name '{' . error '}'

    error           shift, and go to state 224
    "[identifier]"  shift, and go to state 5
    "const"         shift, and go to state 6
    "static"        shift, and go to state 7
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "object"        shift, and go to state 15
    "::"            shift, and go to state 18

    '}'  reduce using rule 193 (setting_body)

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 23
    decl_stmt_nonstatic     go to state 24
    decl_stmt               go to state 225
    function_def_nonstatic  go to state 26
    function_def            go to state 226
    object_def              go to state 227
    setting_body_ent        go to state 228
    setting_body_ne         go to state 229
    setting_body            go to state 230


state 146

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  117              | '{' . statement_list '}'
  118              | . '{' error '}'
  118              | '{' . error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'
  159 statement_list_ne: . statement
  160                  | . statement_list_ne statement
  161 statement_list: .  ['}']
  162               | . statement_list_ne

    error           shift, and go to state 231
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    '}'  reduce using rule 161 (statement_list)

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 256
    statement_list_ne    go to state 257
    statement_list       go to state 258


state 147

  197 animation_def: "animation" name compound_stmt .

    $default  reduce using rule 197 (animation_def)


state 148

    6 name_notabs: identifier "::" name .

    $default  reduce using rule 6 (name_notabs)


state 149

  166 fdef_decl_list_ne: error . ',' fdef_decl_list_ent

    ','  shift, and go to state 259


state 150

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
  103 declarator_noinit: . name_notabs
  104                  | . declarator_noinit '[' expr ']'
  105                  | . declarator_noinit '[' error ']'
  106                  | . declarator_noinit '[' ']'
  107 declarator: . declarator_noinit
  108           | . declarator_noinit '=' initializer
  163 fdef_decl_list_ent: type_name . declarator

    "[identifier]"  shift, and go to state 5

    identifier         go to state 19
    name_notabs        go to state 140
    declarator_noinit  go to state 89
    declarator         go to state 260


state 151

  164 fdef_decl_list_ne: fdef_decl_list_ent .

    $default  reduce using rule 164 (fdef_decl_list_ne)


state 152

  165 fdef_decl_list_ne: fdef_decl_list_ne . ',' fdef_decl_list_ent
  167                  | fdef_decl_list_ne . ',' error ',' fdef_decl_list_ent
  169 fdef_decl_list: fdef_decl_list_ne .  [')']

    ','  shift, and go to state 261

    $default  reduce using rule 169 (fdef_decl_list)


state 153

  172 function_def_nonstatic: name_notabs '(' fdef_decl_list . ')' function_mod compound_stmt

    ')'  shift, and go to state 262


state 154

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
  103 declarator_noinit: . name_notabs
  104                  | . declarator_noinit '[' expr ']'
  105                  | . declarator_noinit '[' error ']'
  106                  | . declarator_noinit '[' ']'
  107 declarator: . declarator_noinit
  108           | . declarator_noinit '=' initializer
  111 declarator_list_ne: error ',' . declarator

    "[identifier]"  shift, and go to state 5

    identifier         go to state 19
    name_notabs        go to state 140
    declarator_noinit  go to state 89
    declarator         go to state 263


state 155

   98 bracket_bracket: '[' ']' .

    $default  reduce using rule 98 (bracket_bracket)


state 156

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  163 fdef_decl_list_ent: . type_name declarator
  164 fdef_decl_list_ne: . fdef_decl_list_ent
  165                  | . fdef_decl_list_ne ',' fdef_decl_list_ent
  166                  | . error ',' fdef_decl_list_ent
  167                  | . fdef_decl_list_ne ',' error ',' fdef_decl_list_ent
  168 fdef_decl_list: .  [')']
  169               | . fdef_decl_list_ne
  173 function_def_nonstatic: type_name name_notabs '(' . fdef_decl_list ')' function_mod compound_stmt

    error           shift, and go to state 149
    "[identifier]"  shift, and go to state 5
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    ')'  reduce using rule 168 (fdef_decl_list)

    identifier          go to state 19
    name_notabs         go to state 52
    name                go to state 21
    pod_type_name       go to state 22
    type_name           go to state 150
    fdef_decl_list_ent  go to state 151
    fdef_decl_list_ne   go to state 152
    fdef_decl_list      go to state 264


state 157

  174 function_def_nonstatic: type_name array_spec name_notabs . '(' fdef_decl_list ')' function_mod compound_stmt

    '('  shift, and go to state 265


state 158

  100 array_spec: array_spec bracket_bracket .

    $default  reduce using rule 100 (array_spec)


state 159

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  104 declarator_noinit: declarator_noinit '[' . expr ']'
  105                  | declarator_noinit '[' . error ']'
  106                  | declarator_noinit '[' . ']'

    error           shift, and go to state 266
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    ']'             shift, and go to state 267
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 268
    pod_type_name     go to state 66


state 160

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  101 initializer: . expr
  102            | . '{' '}'
  108 declarator: declarator_noinit '=' . initializer

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 182
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 184
    pod_type_name     go to state 66
    initializer       go to state 269


state 161

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
  103 declarator_noinit: . name_notabs
  104                  | . declarator_noinit '[' expr ']'
  105                  | . declarator_noinit '[' error ']'
  106                  | . declarator_noinit '[' ']'
  107 declarator: . declarator_noinit
  108           | . declarator_noinit '=' initializer
  110 declarator_list_ne: declarator_list_ne ',' . declarator
  112                   | declarator_list_ne ',' . error ',' declarator

    error           shift, and go to state 270
    "[identifier]"  shift, and go to state 5

    identifier         go to state 19
    name_notabs        go to state 140
    declarator_noinit  go to state 89
    declarator         go to state 271


state 162

  113 decl_stmt_nonstatic: type_name declarator_list_ne ';' .

    $default  reduce using rule 113 (decl_stmt_nonstatic)


state 163

  220 top_node_list_ne: top_node_list_ne error top_node .

    $default  reduce using rule 220 (top_node_list_ne)


state 164

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   48           | "new" name '(' . fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   79 fcall_expr_list_ent: . initializer
   80                    | . name '=' initializer
   81 fcall_expr_list_ne: . fcall_expr_list_ent
   82                   | . fcall_expr_list_ne ',' fcall_expr_list_ent
   83                   | . error ',' expr
   84                   | . fcall_expr_list_ne ',' error ',' fcall_expr_list_ent
   85 fcall_expr_list: .  [')']
   86                | . fcall_expr_list_ne
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  101 initializer: . expr
  102            | . '{' '}'

    error           shift, and go to state 272
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 182
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    ')'  reduce using rule 85 (fcall_expr_list)

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 183
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 61
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 184
    fcall_expr_list_ent  go to state 185
    fcall_expr_list_ne   go to state 186
    fcall_expr_list      go to state 273
    pod_type_name        go to state 66
    initializer          go to state 188


state 165

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   42 new_array_spec: new_array_spec '[' . expr ']'
   43               | new_array_spec '[' . error ']'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   98 bracket_bracket: '[' . ']'

    error           shift, and go to state 274
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    ']'             shift, and go to state 155
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 275
    pod_type_name     go to state 66


state 166

   41 new_array_spec: new_array_spec bracket_bracket .

    $default  reduce using rule 41 (new_array_spec)


state 167

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   40 new_array_spec: type_name '[' . expr ']'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 276
    pod_type_name     go to state 66


state 168

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   77 expr_list_ne: error ',' . expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 277
    pod_type_name     go to state 66


state 169

   11 vector: '<' expr_list_ne '>' .

    $default  reduce using rule 11 (vector)


state 170

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   76 expr_list_ne: expr_list_ne ',' . expr
   78             | expr_list_ne ',' . error ',' expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    error           shift, and go to state 278
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 279
    pod_type_name     go to state 66


state 171

   17 array: '{' '.' '}' .

    $default  reduce using rule 17 (array)


state 172

   13 array_expr_list: ',' expr_list_ne .  ['}']
   15                | ',' expr_list_ne . ','
   76 expr_list_ne: expr_list_ne . ',' expr
   78             | expr_list_ne . ',' error ',' expr

    ','  shift, and go to state 280

    $default  reduce using rule 13 (array_expr_list)


state 173

   16 array: '{' array_expr_list '}' .

    $default  reduce using rule 16 (array)


state 174

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   14 array_expr_list: expr_list_ne ',' .  ['}']
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   76 expr_list_ne: expr_list_ne ',' . expr
   78             | expr_list_ne ',' . error ',' expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    error           shift, and go to state 278
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    '}'  reduce using rule 14 (array_expr_list)

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 279
    pod_type_name     go to state 66


state 175

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   59            | '(' binary_expr '>' . binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 281
    pod_type_name     go to state 66


state 176

   23 primary_expr: '(' expr ')' .

    $default  reduce using rule 23 (primary_expr)


state 177

   33 postfix_expr: postfix_expr "->" name .

    $default  reduce using rule 33 (postfix_expr)


state 178

   34 postfix_expr: postfix_expr "->" builtin_name .

    $default  reduce using rule 34 (postfix_expr)


state 179

   31 postfix_expr: postfix_expr '.' name .

    $default  reduce using rule 31 (postfix_expr)


state 180

   32 postfix_expr: postfix_expr '.' builtin_name .

    $default  reduce using rule 32 (postfix_expr)


state 181

   29 postfix_expr: postfix_expr '(' error . ')'
   83 fcall_expr_list_ne: error . ',' expr

    ','  shift, and go to state 282
    ')'  shift, and go to state 283


state 182

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   12 array_expr_list: . expr_list_ne
   13                | . ',' expr_list_ne
   14                | . expr_list_ne ','
   15                | . ',' expr_list_ne ','
   16 array: . '{' array_expr_list '}'
   16      | '{' . array_expr_list '}'
   17      | . '{' '.' '}'
   17      | '{' . '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   75 expr_list_ne: . expr
   76             | . expr_list_ne ',' expr
   77             | . error ',' expr
   78             | . expr_list_ne ',' error ',' expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  102 initializer: '{' . '}'

    error           shift, and go to state 102
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '.'             shift, and go to state 105
    ','             shift, and go to state 106
    '{'             shift, and go to state 48
    '}'             shift, and go to state 284
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array_expr_list   go to state 107
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 103
    expr_list_ne      go to state 108
    pod_type_name     go to state 66


state 183

   21 primary_expr: name .  ["++", "--", "->", "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '?', '<', '+', '-', '*', '/', '%', '^', '.', ',', '(', ')', '[']
   80 fcall_expr_list_ent: name . '=' initializer

    '='  shift, and go to state 285

    $default  reduce using rule 21 (primary_expr)


state 184

  101 initializer: expr .

    $default  reduce using rule 101 (initializer)


state 185

   81 fcall_expr_list_ne: fcall_expr_list_ent .

    $default  reduce using rule 81 (fcall_expr_list_ne)


state 186

   82 fcall_expr_list_ne: fcall_expr_list_ne . ',' fcall_expr_list_ent
   84                   | fcall_expr_list_ne . ',' error ',' fcall_expr_list_ent
   86 fcall_expr_list: fcall_expr_list_ne .  [')']

    ','  shift, and go to state 286

    $default  reduce using rule 86 (fcall_expr_list)


state 187

   28 postfix_expr: postfix_expr '(' fcall_expr_list . ')'

    ')'  shift, and go to state 287


state 188

   79 fcall_expr_list_ent: initializer .

    $default  reduce using rule 79 (fcall_expr_list_ent)


state 189

   27 postfix_expr: postfix_expr '[' error . ']'

    ']'  shift, and go to state 288


state 190

   26 postfix_expr: postfix_expr '[' expr . ']'

    ']'  shift, and go to state 289


state 191

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr  [$end, "..", "||", '>', '?', ':', ',', '{', '}', ')', ']', ';']
   66            | binary_expr "||" binary_expr .  [$end, "..", "||", '>', '?', ':', ',', '{', '}', ')', ']', ';']

    "&&"  shift, and go to state 119
    "=="  shift, and go to state 120
    "!="  shift, and go to state 121
    "<="  shift, and go to state 122
    ">="  shift, and go to state 123
    "> "  shift, and go to state 124
    '<'   shift, and go to state 126
    '+'   shift, and go to state 127
    '-'   shift, and go to state 128
    '*'   shift, and go to state 129
    '/'   shift, and go to state 130
    '%'   shift, and go to state 131
    '^'   shift, and go to state 132

    $default  reduce using rule 66 (binary_expr)

    Conflict between rule 66 and token "||" resolved as reduce (%left "||").
    Conflict between rule 66 and token "&&" resolved as shift (TS_OROR < "&&").
    Conflict between rule 66 and token "==" resolved as shift (TS_OROR < "==").
    Conflict between rule 66 and token "!=" resolved as shift (TS_OROR < "!=").
    Conflict between rule 66 and token "<=" resolved as shift (TS_OROR < "<=").
    Conflict between rule 66 and token ">=" resolved as shift (TS_OROR < ">=").
    Conflict between rule 66 and token "> " resolved as shift (TS_OROR < "> ").
    Conflict between rule 66 and token '<' resolved as shift (TS_OROR < '<').
    Conflict between rule 66 and token '+' resolved as shift (TS_OROR < '+').
    Conflict between rule 66 and token '-' resolved as shift (TS_OROR < '-').
    Conflict between rule 66 and token '*' resolved as shift (TS_OROR < '*').
    Conflict between rule 66 and token '/' resolved as shift (TS_OROR < '/').
    Conflict between rule 66 and token '%' resolved as shift (TS_OROR < '%').
    Conflict between rule 66 and token '^' resolved as shift (TS_OROR < '^').


state 192

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr  [$end, "..", "||", "&&", '>', '?', ':', ',', '{', '}', ')', ']', ';']
   65            | binary_expr "&&" binary_expr .  [$end, "..", "||", "&&", '>', '?', ':', ',', '{', '}', ')', ']', ';']
   66            | binary_expr . "||" binary_expr

    "=="  shift, and go to state 120
    "!="  shift, and go to state 121
    "<="  shift, and go to state 122
    ">="  shift, and go to state 123
    "> "  shift, and go to state 124
    '<'   shift, and go to state 126
    '+'   shift, and go to state 127
    '-'   shift, and go to state 128
    '*'   shift, and go to state 129
    '/'   shift, and go to state 130
    '%'   shift, and go to state 131
    '^'   shift, and go to state 132

    $default  reduce using rule 65 (binary_expr)

    Conflict between rule 65 and token "||" resolved as reduce ("||" < TS_ANDAND).
    Conflict between rule 65 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 65 and token "==" resolved as shift (TS_ANDAND < "==").
    Conflict between rule 65 and token "!=" resolved as shift (TS_ANDAND < "!=").
    Conflict between rule 65 and token "<=" resolved as shift (TS_ANDAND < "<=").
    Conflict between rule 65 and token ">=" resolved as shift (TS_ANDAND < ">=").
    Conflict between rule 65 and token "> " resolved as shift (TS_ANDAND < "> ").
    Conflict between rule 65 and token '<' resolved as shift (TS_ANDAND < '<').
    Conflict between rule 65 and token '+' resolved as shift (TS_ANDAND < '+').
    Conflict between rule 65 and token '-' resolved as shift (TS_ANDAND < '-').
    Conflict between rule 65 and token '*' resolved as shift (TS_ANDAND < '*').
    Conflict between rule 65 and token '/' resolved as shift (TS_ANDAND < '/').
    Conflict between rule 65 and token '%' resolved as shift (TS_ANDAND < '%').
    Conflict between rule 65 and token '^' resolved as shift (TS_ANDAND < '^').


state 193

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr  [$end, "..", "||", "&&", "==", "!=", '>', '?', ':', ',', '{', '}', ')', ']', ';']
   63            | binary_expr "==" binary_expr .  [$end, "..", "||", "&&", "==", "!=", '>', '?', ':', ',', '{', '}', ')', ']', ';']
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    "<="  shift, and go to state 122
    ">="  shift, and go to state 123
    "> "  shift, and go to state 124
    '<'   shift, and go to state 126
    '+'   shift, and go to state 127
    '-'   shift, and go to state 128
    '*'   shift, and go to state 129
    '/'   shift, and go to state 130
    '%'   shift, and go to state 131
    '^'   shift, and go to state 132

    $default  reduce using rule 63 (binary_expr)

    Conflict between rule 63 and token "||" resolved as reduce ("||" < TS_EQ).
    Conflict between rule 63 and token "&&" resolved as reduce ("&&" < TS_EQ).
    Conflict between rule 63 and token "==" resolved as reduce (%left "==").
    Conflict between rule 63 and token "!=" resolved as reduce (%left "!=").
    Conflict between rule 63 and token "<=" resolved as shift (TS_EQ < "<=").
    Conflict between rule 63 and token ">=" resolved as shift (TS_EQ < ">=").
    Conflict between rule 63 and token "> " resolved as shift (TS_EQ < "> ").
    Conflict between rule 63 and token '<' resolved as shift (TS_EQ < '<').
    Conflict between rule 63 and token '+' resolved as shift (TS_EQ < '+').
    Conflict between rule 63 and token '-' resolved as shift (TS_EQ < '-').
    Conflict between rule 63 and token '*' resolved as shift (TS_EQ < '*').
    Conflict between rule 63 and token '/' resolved as shift (TS_EQ < '/').
    Conflict between rule 63 and token '%' resolved as shift (TS_EQ < '%').
    Conflict between rule 63 and token '^' resolved as shift (TS_EQ < '^').


state 194

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr  [$end, "..", "||", "&&", "==", "!=", '>', '?', ':', ',', '{', '}', ')', ']', ';']
   64            | binary_expr "!=" binary_expr .  [$end, "..", "||", "&&", "==", "!=", '>', '?', ':', ',', '{', '}', ')', ']', ';']
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    "<="  shift, and go to state 122
    ">="  shift, and go to state 123
    "> "  shift, and go to state 124
    '<'   shift, and go to state 126
    '+'   shift, and go to state 127
    '-'   shift, and go to state 128
    '*'   shift, and go to state 129
    '/'   shift, and go to state 130
    '%'   shift, and go to state 131
    '^'   shift, and go to state 132

    $default  reduce using rule 64 (binary_expr)

    Conflict between rule 64 and token "||" resolved as reduce ("||" < TS_NEQ).
    Conflict between rule 64 and token "&&" resolved as reduce ("&&" < TS_NEQ).
    Conflict between rule 64 and token "==" resolved as reduce (%left "==").
    Conflict between rule 64 and token "!=" resolved as reduce (%left "!=").
    Conflict between rule 64 and token "<=" resolved as shift (TS_NEQ < "<=").
    Conflict between rule 64 and token ">=" resolved as shift (TS_NEQ < ">=").
    Conflict between rule 64 and token "> " resolved as shift (TS_NEQ < "> ").
    Conflict between rule 64 and token '<' resolved as shift (TS_NEQ < '<').
    Conflict between rule 64 and token '+' resolved as shift (TS_NEQ < '+').
    Conflict between rule 64 and token '-' resolved as shift (TS_NEQ < '-').
    Conflict between rule 64 and token '*' resolved as shift (TS_NEQ < '*').
    Conflict between rule 64 and token '/' resolved as shift (TS_NEQ < '/').
    Conflict between rule 64 and token '%' resolved as shift (TS_NEQ < '%').
    Conflict between rule 64 and token '^' resolved as shift (TS_NEQ < '^').


state 195

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', ',', '{', '}', ')', ']', ';']
   61            | binary_expr "<=" binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', ',', '{', '}', ')', ']', ';']
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '+'  shift, and go to state 127
    '-'  shift, and go to state 128
    '*'  shift, and go to state 129
    '/'  shift, and go to state 130
    '%'  shift, and go to state 131
    '^'  shift, and go to state 132

    $default  reduce using rule 61 (binary_expr)

    Conflict between rule 61 and token "||" resolved as reduce ("||" < TS_LE).
    Conflict between rule 61 and token "&&" resolved as reduce ("&&" < TS_LE).
    Conflict between rule 61 and token "==" resolved as reduce ("==" < TS_LE).
    Conflict between rule 61 and token "!=" resolved as reduce ("!=" < TS_LE).
    Conflict between rule 61 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 61 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 61 and token "> " resolved as reduce (%left "> ").
    Conflict between rule 61 and token '<' resolved as reduce (%left '<').
    Conflict between rule 61 and token '+' resolved as shift (TS_LE < '+').
    Conflict between rule 61 and token '-' resolved as shift (TS_LE < '-').
    Conflict between rule 61 and token '*' resolved as shift (TS_LE < '*').
    Conflict between rule 61 and token '/' resolved as shift (TS_LE < '/').
    Conflict between rule 61 and token '%' resolved as shift (TS_LE < '%').
    Conflict between rule 61 and token '^' resolved as shift (TS_LE < '^').


state 196

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', ',', '{', '}', ')', ']', ';']
   62            | binary_expr ">=" binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', ',', '{', '}', ')', ']', ';']
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '+'  shift, and go to state 127
    '-'  shift, and go to state 128
    '*'  shift, and go to state 129
    '/'  shift, and go to state 130
    '%'  shift, and go to state 131
    '^'  shift, and go to state 132

    $default  reduce using rule 62 (binary_expr)

    Conflict between rule 62 and token "||" resolved as reduce ("||" < TS_GE).
    Conflict between rule 62 and token "&&" resolved as reduce ("&&" < TS_GE).
    Conflict between rule 62 and token "==" resolved as reduce ("==" < TS_GE).
    Conflict between rule 62 and token "!=" resolved as reduce ("!=" < TS_GE).
    Conflict between rule 62 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 62 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 62 and token "> " resolved as reduce (%left "> ").
    Conflict between rule 62 and token '<' resolved as reduce (%left '<').
    Conflict between rule 62 and token '+' resolved as shift (TS_GE < '+').
    Conflict between rule 62 and token '-' resolved as shift (TS_GE < '-').
    Conflict between rule 62 and token '*' resolved as shift (TS_GE < '*').
    Conflict between rule 62 and token '/' resolved as shift (TS_GE < '/').
    Conflict between rule 62 and token '%' resolved as shift (TS_GE < '%').
    Conflict between rule 62 and token '^' resolved as shift (TS_GE < '^').


state 197

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', ',', '{', '}', ')', ']', ';']
   60            | binary_expr "> " binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', ',', '{', '}', ')', ']', ';']
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '+'  shift, and go to state 127
    '-'  shift, and go to state 128
    '*'  shift, and go to state 129
    '/'  shift, and go to state 130
    '%'  shift, and go to state 131
    '^'  shift, and go to state 132

    $default  reduce using rule 60 (binary_expr)

    Conflict between rule 60 and token "||" resolved as reduce ("||" < TS_G).
    Conflict between rule 60 and token "&&" resolved as reduce ("&&" < TS_G).
    Conflict between rule 60 and token "==" resolved as reduce ("==" < TS_G).
    Conflict between rule 60 and token "!=" resolved as reduce ("!=" < TS_G).
    Conflict between rule 60 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 60 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 60 and token "> " resolved as reduce (%left "> ").
    Conflict between rule 60 and token '<' resolved as reduce (%left '<').
    Conflict between rule 60 and token '+' resolved as shift (TS_G < '+').
    Conflict between rule 60 and token '-' resolved as shift (TS_G < '-').
    Conflict between rule 60 and token '*' resolved as shift (TS_G < '*').
    Conflict between rule 60 and token '/' resolved as shift (TS_G < '/').
    Conflict between rule 60 and token '%' resolved as shift (TS_G < '%').
    Conflict between rule 60 and token '^' resolved as shift (TS_G < '^').


state 198

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   69          | binary_expr '?' ':' . cond_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 290
    pod_type_name     go to state 66


state 199

   68 cond_expr: binary_expr '?' expr . ':' cond_expr

    ':'  shift, and go to state 291


state 200

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', ',', '{', '}', ')', ']', ';']
   58            | binary_expr '<' binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', ',', '{', '}', ')', ']', ';']
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '+'  shift, and go to state 127
    '-'  shift, and go to state 128
    '*'  shift, and go to state 129
    '/'  shift, and go to state 130
    '%'  shift, and go to state 131
    '^'  shift, and go to state 132

    $default  reduce using rule 58 (binary_expr)

    Conflict between rule 58 and token "||" resolved as reduce ("||" < '<').
    Conflict between rule 58 and token "&&" resolved as reduce ("&&" < '<').
    Conflict between rule 58 and token "==" resolved as reduce ("==" < '<').
    Conflict between rule 58 and token "!=" resolved as reduce ("!=" < '<').
    Conflict between rule 58 and token "<=" resolved as reduce (%left "<=").
    Conflict between rule 58 and token ">=" resolved as reduce (%left ">=").
    Conflict between rule 58 and token "> " resolved as reduce (%left "> ").
    Conflict between rule 58 and token '<' resolved as reduce (%left '<').
    Conflict between rule 58 and token '+' resolved as shift ('<' < '+').
    Conflict between rule 58 and token '-' resolved as shift ('<' < '-').
    Conflict between rule 58 and token '*' resolved as shift ('<' < '*').
    Conflict between rule 58 and token '/' resolved as shift ('<' < '/').
    Conflict between rule 58 and token '%' resolved as shift ('<' < '%').
    Conflict between rule 58 and token '^' resolved as shift ('<' < '^').


state 201

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', ',', '{', '}', ')', ']', ';']
   56            | binary_expr '+' binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', ',', '{', '}', ')', ']', ';']
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '*'  shift, and go to state 129
    '/'  shift, and go to state 130
    '%'  shift, and go to state 131
    '^'  shift, and go to state 132

    $default  reduce using rule 56 (binary_expr)

    Conflict between rule 56 and token "||" resolved as reduce ("||" < '+').
    Conflict between rule 56 and token "&&" resolved as reduce ("&&" < '+').
    Conflict between rule 56 and token "==" resolved as reduce ("==" < '+').
    Conflict between rule 56 and token "!=" resolved as reduce ("!=" < '+').
    Conflict between rule 56 and token "<=" resolved as reduce ("<=" < '+').
    Conflict between rule 56 and token ">=" resolved as reduce (">=" < '+').
    Conflict between rule 56 and token "> " resolved as reduce ("> " < '+').
    Conflict between rule 56 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 56 and token '+' resolved as reduce (%left '+').
    Conflict between rule 56 and token '-' resolved as reduce (%left '-').
    Conflict between rule 56 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 56 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 56 and token '%' resolved as shift ('+' < '%').
    Conflict between rule 56 and token '^' resolved as shift ('+' < '^').


state 202

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', ',', '{', '}', ')', ']', ';']
   57            | binary_expr '-' binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', ',', '{', '}', ')', ']', ';']
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '*'  shift, and go to state 129
    '/'  shift, and go to state 130
    '%'  shift, and go to state 131
    '^'  shift, and go to state 132

    $default  reduce using rule 57 (binary_expr)

    Conflict between rule 57 and token "||" resolved as reduce ("||" < '-').
    Conflict between rule 57 and token "&&" resolved as reduce ("&&" < '-').
    Conflict between rule 57 and token "==" resolved as reduce ("==" < '-').
    Conflict between rule 57 and token "!=" resolved as reduce ("!=" < '-').
    Conflict between rule 57 and token "<=" resolved as reduce ("<=" < '-').
    Conflict between rule 57 and token ">=" resolved as reduce (">=" < '-').
    Conflict between rule 57 and token "> " resolved as reduce ("> " < '-').
    Conflict between rule 57 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 57 and token '+' resolved as reduce (%left '+').
    Conflict between rule 57 and token '-' resolved as reduce (%left '-').
    Conflict between rule 57 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 57 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 57 and token '%' resolved as shift ('-' < '%').
    Conflict between rule 57 and token '^' resolved as shift ('-' < '^').


state 203

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', ',', '{', '}', ')', ']', ';']
   53            | binary_expr '*' binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', ',', '{', '}', ')', ']', ';']
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '^'  shift, and go to state 132

    $default  reduce using rule 53 (binary_expr)

    Conflict between rule 53 and token "||" resolved as reduce ("||" < '*').
    Conflict between rule 53 and token "&&" resolved as reduce ("&&" < '*').
    Conflict between rule 53 and token "==" resolved as reduce ("==" < '*').
    Conflict between rule 53 and token "!=" resolved as reduce ("!=" < '*').
    Conflict between rule 53 and token "<=" resolved as reduce ("<=" < '*').
    Conflict between rule 53 and token ">=" resolved as reduce (">=" < '*').
    Conflict between rule 53 and token "> " resolved as reduce ("> " < '*').
    Conflict between rule 53 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 53 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 53 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 53 and token '*' resolved as reduce (%left '*').
    Conflict between rule 53 and token '/' resolved as reduce (%left '/').
    Conflict between rule 53 and token '%' resolved as reduce (%left '%').
    Conflict between rule 53 and token '^' resolved as shift ('*' < '^').


state 204

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', ',', '{', '}', ')', ']', ';']
   54            | binary_expr '/' binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', ',', '{', '}', ')', ']', ';']
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '^'  shift, and go to state 132

    $default  reduce using rule 54 (binary_expr)

    Conflict between rule 54 and token "||" resolved as reduce ("||" < '/').
    Conflict between rule 54 and token "&&" resolved as reduce ("&&" < '/').
    Conflict between rule 54 and token "==" resolved as reduce ("==" < '/').
    Conflict between rule 54 and token "!=" resolved as reduce ("!=" < '/').
    Conflict between rule 54 and token "<=" resolved as reduce ("<=" < '/').
    Conflict between rule 54 and token ">=" resolved as reduce (">=" < '/').
    Conflict between rule 54 and token "> " resolved as reduce ("> " < '/').
    Conflict between rule 54 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 54 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 54 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 54 and token '*' resolved as reduce (%left '*').
    Conflict between rule 54 and token '/' resolved as reduce (%left '/').
    Conflict between rule 54 and token '%' resolved as reduce (%left '%').
    Conflict between rule 54 and token '^' resolved as shift ('/' < '^').


state 205

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', ',', '{', '}', ')', ']', ';']
   55            | binary_expr '%' binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', ',', '{', '}', ')', ']', ';']
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '^'  shift, and go to state 132

    $default  reduce using rule 55 (binary_expr)

    Conflict between rule 55 and token "||" resolved as reduce ("||" < '%').
    Conflict between rule 55 and token "&&" resolved as reduce ("&&" < '%').
    Conflict between rule 55 and token "==" resolved as reduce ("==" < '%').
    Conflict between rule 55 and token "!=" resolved as reduce ("!=" < '%').
    Conflict between rule 55 and token "<=" resolved as reduce ("<=" < '%').
    Conflict between rule 55 and token ">=" resolved as reduce (">=" < '%').
    Conflict between rule 55 and token "> " resolved as reduce ("> " < '%').
    Conflict between rule 55 and token '<' resolved as reduce ('<' < '%').
    Conflict between rule 55 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 55 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 55 and token '*' resolved as reduce (%left '*').
    Conflict between rule 55 and token '/' resolved as reduce (%left '/').
    Conflict between rule 55 and token '%' resolved as reduce (%left '%').
    Conflict between rule 55 and token '^' resolved as shift ('%' < '^').


state 206

   52 binary_expr: binary_expr . '^' binary_expr  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', ',', '{', '}', ')', ']', ';']
   52            | binary_expr '^' binary_expr .  [$end, "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '>', '?', ':', '<', '+', '-', '*', '/', '%', ',', '{', '}', ')', ']', ';']
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    '^'  shift, and go to state 132

    $default  reduce using rule 52 (binary_expr)

    Conflict between rule 52 and token "||" resolved as reduce ("||" < '^').
    Conflict between rule 52 and token "&&" resolved as reduce ("&&" < '^').
    Conflict between rule 52 and token "==" resolved as reduce ("==" < '^').
    Conflict between rule 52 and token "!=" resolved as reduce ("!=" < '^').
    Conflict between rule 52 and token "<=" resolved as reduce ("<=" < '^').
    Conflict between rule 52 and token ">=" resolved as reduce (">=" < '^').
    Conflict between rule 52 and token "> " resolved as reduce ("> " < '^').
    Conflict between rule 52 and token '<' resolved as reduce ('<' < '^').
    Conflict between rule 52 and token '+' resolved as reduce ('+' < '^').
    Conflict between rule 52 and token '-' resolved as reduce ('-' < '^').
    Conflict between rule 52 and token '*' resolved as reduce ('*' < '^').
    Conflict between rule 52 and token '/' resolved as reduce ('/' < '^').
    Conflict between rule 52 and token '%' resolved as reduce ('%' < '^').
    Conflict between rule 52 and token '^' resolved as shift (%right '^').


state 207

   71 range_expr: cond_expr ".." cond_expr .

    $default  reduce using rule 71 (range_expr)


state 208

   30 postfix_expr: pod_type_name '(' expr . ')'

    ')'  shift, and go to state 292


state 209

  239 pov_object_entry: . "macro" '=' name
  240                 | . "declare" '=' name
  241                 | . "params" '=' '{' pov_exprlist '}'
  242                 | . "defs" '=' '{' pov_assignment_list '}'
  243                 | . "include" '=' '{' pov_exprlist '}'
  244                 | . "type" '=' pov_expr
  245                 | . "append_raw" '=' pov_expr
  246 pov_object_entry_list: . pov_object_entry
  247                      | . pov_object_entry_list ',' pov_object_entry
  248                      | . error ',' pov_object_entry
  249                      | . pov_object_entry_list ',' error ',' pov_object_entry
  250 pov_entry: '@' "@object" '(' . pov_object_entry_list ')'

    error         shift, and go to state 293
    "params"      shift, and go to state 294
    "defs"        shift, and go to state 295
    "macro"       shift, and go to state 296
    "declare"     shift, and go to state 297
    "include"     shift, and go to state 298
    "type"        shift, and go to state 299
    "append_raw"  shift, and go to state 300

    pov_object_entry       go to state 301
    pov_object_entry_list  go to state 302


state 210

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  251 pov_entry: '@' "@fileID" '=' . name

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier   go to state 19
    name_notabs  go to state 52
    name         go to state 303


state 211

  258 pov_entry_list_ne: pov_entry_list_ne error pov_entry .

    $default  reduce using rule 258 (pov_entry_list_ne)


state 212

  114 decl_stmt_nonstatic: "const" type_name declarator_list_ne ';' .

    $default  reduce using rule 114 (decl_stmt_nonstatic)


state 213

   91 pod_type_name: "vector" '<' expr '>' .

    $default  reduce using rule 91 (pod_type_name)


state 214

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   93              | "matrix" '<' expr ',' . expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 304
    pod_type_name     go to state 66


state 215

  187 object_def: "object" name '{' error . '}'

    '}'  shift, and go to state 305


state 216

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  175 function_def: . function_def_nonstatic
  176             | . "static" function_def_nonstatic
  178 obj_function_def: "method" . function_def

    "[identifier]"  shift, and go to state 5
    "static"        shift, and go to state 306
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 307
    function_def_nonstatic  go to state 26
    function_def            go to state 308


state 217

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
  179 obj_function_def: '~' . name_notabs '(' ')' compound_stmt

    "[identifier]"  shift, and go to state 5

    identifier   go to state 19
    name_notabs  go to state 309


state 218

  181 object_body_ent: decl_stmt .

    $default  reduce using rule 181 (object_body_ent)


state 219

  177 obj_function_def: function_def .

    $default  reduce using rule 177 (obj_function_def)


state 220

  180 object_body_ent: obj_function_def .

    $default  reduce using rule 180 (object_body_ent)


state 221

  182 object_body_ne: object_body_ent .

    $default  reduce using rule 182 (object_body_ne)


state 222

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  175 function_def: . function_def_nonstatic
  176             | . "static" function_def_nonstatic
  177 obj_function_def: . function_def
  178                 | . "method" function_def
  179                 | . '~' name_notabs '(' ')' compound_stmt
  180 object_body_ent: . obj_function_def
  181                | . decl_stmt
  183 object_body_ne: object_body_ne . object_body_ent
  185 object_body: object_body_ne .  ['}']

    "[identifier]"  shift, and go to state 5
    "const"         shift, and go to state 6
    "static"        shift, and go to state 7
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "method"        shift, and go to state 216
    "::"            shift, and go to state 18
    '~'             shift, and go to state 217

    $default  reduce using rule 185 (object_body)

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 23
    decl_stmt_nonstatic     go to state 24
    decl_stmt               go to state 218
    function_def_nonstatic  go to state 26
    function_def            go to state 219
    obj_function_def        go to state 220
    object_body_ent         go to state 310


state 223

  186 object_def: "object" name '{' object_body . '}'

    '}'  shift, and go to state 311


state 224

  196 setting_def: "setting" name '{' error . '}'

    '}'  shift, and go to state 312


state 225

  189 setting_body_ent: decl_stmt .

    $default  reduce using rule 189 (setting_body_ent)


state 226

  188 setting_body_ent: function_def .

    $default  reduce using rule 188 (setting_body_ent)


state 227

  190 setting_body_ent: object_def .

    $default  reduce using rule 190 (setting_body_ent)


state 228

  191 setting_body_ne: setting_body_ent .

    $default  reduce using rule 191 (setting_body_ne)


state 229

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  175 function_def: . function_def_nonstatic
  176             | . "static" function_def_nonstatic
  186 object_def: . "object" name '{' object_body '}'
  187           | . "object" name '{' error '}'
  188 setting_body_ent: . function_def
  189                 | . decl_stmt
  190                 | . object_def
  192 setting_body_ne: setting_body_ne . setting_body_ent
  194 setting_body: setting_body_ne .  ['}']

    "[identifier]"  shift, and go to state 5
    "const"         shift, and go to state 6
    "static"        shift, and go to state 7
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "object"        shift, and go to state 15
    "::"            shift, and go to state 18

    $default  reduce using rule 194 (setting_body)

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 23
    decl_stmt_nonstatic     go to state 24
    decl_stmt               go to state 225
    function_def_nonstatic  go to state 26
    function_def            go to state 226
    object_def              go to state 227
    setting_body_ent        go to state 313


state 230

  195 setting_def: "setting" name '{' setting_body . '}'

    '}'  shift, and go to state 314


state 231

  118 compound_stmt: '{' error . '}'
  158 statement: error . ';'

    '}'  shift, and go to state 315
    ';'  shift, and go to state 316


state 232

  119 selection_stmt: "if" . '(' expr ')' statement
  120               | "if" . '(' error ')' statement
  121               | "if" . '(' expr ')' statement "else" statement
  122               | "if" . '(' error ')' statement "else" statement

    '('  shift, and go to state 317


state 233

  129 iteration_stmt: "for" . '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement

    '('  shift, and go to state 318


state 234

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  132               | "do" . statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  133               | "do" . statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'

    error           shift, and go to state 319
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 320


state 235

  130 iteration_stmt: "while" . '(' expr ')' statement
  131               | "while" . '(' error ')' statement

    '('  shift, and go to state 321


state 236

  134 jump_stmt: "break" . ';'

    ';'  shift, and go to state 322


state 237

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  135 jump_stmt: "return" . expr ';'
  136          | "return" . ';'

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 323

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 324
    pod_type_name     go to state 66


state 238

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  116 decl_stmt: "static" . decl_stmt_nonstatic

    "[identifier]"  shift, and go to state 5
    "const"         shift, and go to state 6
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 21
    pod_type_name        go to state 22
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 74


state 239

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  146 ani_stmt: '%' . ani_block ';'
  147         | '%' . cond_expr ani_block ';'
  148         | '%' . name ':' ani_block ';'
  149         | '%' . name ':' cond_expr ani_block ';'
  211 ani_block: . '{' typed_scope_list '}'
  212          | . '{' error '}'

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 325
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 326
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 327
    pod_type_name     go to state 66
    ani_block         go to state 328


state 240

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   12 array_expr_list: . expr_list_ne
   13                | . ',' expr_list_ne
   14                | . expr_list_ne ','
   15                | . ',' expr_list_ne ','
   16 array: . '{' array_expr_list '}'
   16      | '{' . array_expr_list '}'
   17      | . '{' '.' '}'
   17      | '{' . '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   75 expr_list_ne: . expr
   76             | . expr_list_ne ',' expr
   77             | . error ',' expr
   78             | . expr_list_ne ',' error ',' expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  117              | '{' . statement_list '}'
  118              | . '{' error '}'
  118              | '{' . error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'
  159 statement_list_ne: . statement
  160                  | . statement_list_ne statement
  161 statement_list: .  ['}']
  162               | . statement_list_ne

    error           shift, and go to state 329
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '.'             shift, and go to state 105
    ','             shift, and go to state 106
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    '}'  reduce using rule 161 (statement_list)

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array_expr_list      go to state 107
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 330
    expr_list_ne         go to state 108
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 256
    statement_list_ne    go to state 257
    statement_list       go to state 258


state 241

  144 expr_stmt: ';' .

    $default  reduce using rule 144 (expr_stmt)


state 242

   21 primary_expr: name .  ["++", "--", "->", "+=", "-=", "*=", "/=", "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '?', '<', '+', '-', '*', '/', '%', '^', '.', ',', '}', '(', '[', '=', ';']
   96 type_name: name .  [error, "[identifier]"]

    error           reduce using rule 96 (type_name)
    "[identifier]"  reduce using rule 96 (type_name)
    $default        reduce using rule 21 (primary_expr)


state 243

   51 binary_expr: unary_expr .  ["..", "||", "&&", "==", "!=", "<=", ">=", "> ", '?', '<', '+', '-', '*', '/', '%', '^', ',', '}', ')', ';']
  137 assign_op: . '='
  138          | . "+="
  139          | . "-="
  140          | . "*="
  141          | . "/="
  142 assignment: unary_expr . assign_op initializer

    "+="  shift, and go to state 331
    "-="  shift, and go to state 332
    "*="  shift, and go to state 333
    "/="  shift, and go to state 334
    '='   shift, and go to state 335

    $default  reduce using rule 51 (binary_expr)

    assign_op  go to state 336


state 244

  145 expr_stmt: expr . ';'

    ';'  shift, and go to state 337


state 245

   30 postfix_expr: pod_type_name . '(' expr ')'
   95 type_name: pod_type_name .  [error, "[identifier]"]

    '('  shift, and go to state 134

    $default  reduce using rule 95 (type_name)


state 246

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
  103 declarator_noinit: . name_notabs
  104                  | . declarator_noinit '[' expr ']'
  105                  | . declarator_noinit '[' error ']'
  106                  | . declarator_noinit '[' ']'
  107 declarator: . declarator_noinit
  108           | . declarator_noinit '=' initializer
  109 declarator_list_ne: . declarator
  110                   | . declarator_list_ne ',' declarator
  111                   | . error ',' declarator
  112                   | . declarator_list_ne ',' error ',' declarator
  113 decl_stmt_nonstatic: type_name . declarator_list_ne ';'

    error           shift, and go to state 84
    "[identifier]"  shift, and go to state 5

    identifier          go to state 19
    name_notabs         go to state 140
    declarator_noinit   go to state 89
    declarator          go to state 90
    declarator_list_ne  go to state 91


state 247

  152 statement: decl_stmt .

    $default  reduce using rule 152 (statement)


state 248

  153 statement: compound_stmt .

    $default  reduce using rule 153 (statement)


state 249

  154 statement: selection_stmt .

    $default  reduce using rule 154 (statement)


state 250

  155 statement: iteration_stmt .

    $default  reduce using rule 155 (statement)


state 251

  156 statement: jump_stmt .

    $default  reduce using rule 156 (statement)


state 252

  143 assign_stmt: assignment . ';'

    ';'  shift, and go to state 338


state 253

  151 statement: assign_stmt .

    $default  reduce using rule 151 (statement)


state 254

  150 statement: expr_stmt .

    $default  reduce using rule 150 (statement)


state 255

  157 statement: ani_stmt .

    $default  reduce using rule 157 (statement)


state 256

  159 statement_list_ne: statement .

    $default  reduce using rule 159 (statement_list_ne)


state 257

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'
  160 statement_list_ne: statement_list_ne . statement
  162 statement_list: statement_list_ne .  ['}']

    error           shift, and go to state 319
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    '}'  reduce using rule 162 (statement_list)

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 339


state 258

  117 compound_stmt: '{' statement_list . '}'

    '}'  shift, and go to state 340


state 259

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  163 fdef_decl_list_ent: . type_name declarator
  166 fdef_decl_list_ne: error ',' . fdef_decl_list_ent

    "[identifier]"  shift, and go to state 5
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    identifier          go to state 19
    name_notabs         go to state 52
    name                go to state 21
    pod_type_name       go to state 22
    type_name           go to state 150
    fdef_decl_list_ent  go to state 341


state 260

  163 fdef_decl_list_ent: type_name declarator .

    $default  reduce using rule 163 (fdef_decl_list_ent)


state 261

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  163 fdef_decl_list_ent: . type_name declarator
  165 fdef_decl_list_ne: fdef_decl_list_ne ',' . fdef_decl_list_ent
  167                  | fdef_decl_list_ne ',' . error ',' fdef_decl_list_ent

    error           shift, and go to state 342
    "[identifier]"  shift, and go to state 5
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    identifier          go to state 19
    name_notabs         go to state 52
    name                go to state 21
    pod_type_name       go to state 22
    type_name           go to state 150
    fdef_decl_list_ent  go to state 343


state 262

  170 function_mod: .  ['{']
  171             | . "const"
  172 function_def_nonstatic: name_notabs '(' fdef_decl_list ')' . function_mod compound_stmt

    "const"  shift, and go to state 344

    $default  reduce using rule 170 (function_mod)

    function_mod  go to state 345


state 263

  111 declarator_list_ne: error ',' declarator .

    $default  reduce using rule 111 (declarator_list_ne)


state 264

  173 function_def_nonstatic: type_name name_notabs '(' fdef_decl_list . ')' function_mod compound_stmt

    ')'  shift, and go to state 346


state 265

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  163 fdef_decl_list_ent: . type_name declarator
  164 fdef_decl_list_ne: . fdef_decl_list_ent
  165                  | . fdef_decl_list_ne ',' fdef_decl_list_ent
  166                  | . error ',' fdef_decl_list_ent
  167                  | . fdef_decl_list_ne ',' error ',' fdef_decl_list_ent
  168 fdef_decl_list: .  [')']
  169               | . fdef_decl_list_ne
  174 function_def_nonstatic: type_name array_spec name_notabs '(' . fdef_decl_list ')' function_mod compound_stmt

    error           shift, and go to state 149
    "[identifier]"  shift, and go to state 5
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    ')'  reduce using rule 168 (fdef_decl_list)

    identifier          go to state 19
    name_notabs         go to state 52
    name                go to state 21
    pod_type_name       go to state 22
    type_name           go to state 150
    fdef_decl_list_ent  go to state 151
    fdef_decl_list_ne   go to state 152
    fdef_decl_list      go to state 347


state 266

  105 declarator_noinit: declarator_noinit '[' error . ']'

    ']'  shift, and go to state 348


state 267

  106 declarator_noinit: declarator_noinit '[' ']' .

    $default  reduce using rule 106 (declarator_noinit)


state 268

  104 declarator_noinit: declarator_noinit '[' expr . ']'

    ']'  shift, and go to state 349


state 269

  108 declarator: declarator_noinit '=' initializer .

    $default  reduce using rule 108 (declarator)


state 270

  112 declarator_list_ne: declarator_list_ne ',' error . ',' declarator

    ','  shift, and go to state 350


state 271

  110 declarator_list_ne: declarator_list_ne ',' declarator .

    $default  reduce using rule 110 (declarator_list_ne)


state 272

   83 fcall_expr_list_ne: error . ',' expr

    ','  shift, and go to state 282


state 273

   48 unary_expr: "new" name '(' fcall_expr_list . ')'

    ')'  shift, and go to state 351


state 274

   43 new_array_spec: new_array_spec '[' error . ']'

    ']'  shift, and go to state 352


state 275

   42 new_array_spec: new_array_spec '[' expr . ']'

    ']'  shift, and go to state 353


state 276

   40 new_array_spec: type_name '[' expr . ']'

    ']'  shift, and go to state 354


state 277

   77 expr_list_ne: error ',' expr .

    $default  reduce using rule 77 (expr_list_ne)


state 278

   78 expr_list_ne: expr_list_ne ',' error . ',' expr

    ','  shift, and go to state 355


state 279

   76 expr_list_ne: expr_list_ne ',' expr .

    $default  reduce using rule 76 (expr_list_ne)


state 280

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   15 array_expr_list: ',' expr_list_ne ',' .  ['}']
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   76 expr_list_ne: expr_list_ne ',' . expr
   78             | expr_list_ne ',' . error ',' expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    error           shift, and go to state 278
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    '}'  reduce using rule 15 (array_expr_list)

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 279
    pod_type_name     go to state 66


state 281

   52 binary_expr: binary_expr . '^' binary_expr
   53            | binary_expr . '*' binary_expr
   54            | binary_expr . '/' binary_expr
   55            | binary_expr . '%' binary_expr
   56            | binary_expr . '+' binary_expr
   57            | binary_expr . '-' binary_expr
   58            | binary_expr . '<' binary_expr
   59            | '(' binary_expr '>' binary_expr . ')'
   60            | binary_expr . "> " binary_expr
   61            | binary_expr . "<=" binary_expr
   62            | binary_expr . ">=" binary_expr
   63            | binary_expr . "==" binary_expr
   64            | binary_expr . "!=" binary_expr
   65            | binary_expr . "&&" binary_expr
   66            | binary_expr . "||" binary_expr

    "||"  shift, and go to state 118
    "&&"  shift, and go to state 119
    "=="  shift, and go to state 120
    "!="  shift, and go to state 121
    "<="  shift, and go to state 122
    ">="  shift, and go to state 123
    "> "  shift, and go to state 124
    '<'   shift, and go to state 126
    '+'   shift, and go to state 127
    '-'   shift, and go to state 128
    '*'   shift, and go to state 129
    '/'   shift, and go to state 130
    '%'   shift, and go to state 131
    '^'   shift, and go to state 132
    ')'   shift, and go to state 356


state 282

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   83 fcall_expr_list_ne: error ',' . expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 357
    pod_type_name     go to state 66


state 283

   29 postfix_expr: postfix_expr '(' error ')' .

    $default  reduce using rule 29 (postfix_expr)


state 284

  102 initializer: '{' '}' .

    $default  reduce using rule 102 (initializer)


state 285

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   80 fcall_expr_list_ent: name '=' . initializer
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  101 initializer: . expr
  102            | . '{' '}'

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 182
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 184
    pod_type_name     go to state 66
    initializer       go to state 358


state 286

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   79 fcall_expr_list_ent: . initializer
   80                    | . name '=' initializer
   82 fcall_expr_list_ne: fcall_expr_list_ne ',' . fcall_expr_list_ent
   84                   | fcall_expr_list_ne ',' . error ',' fcall_expr_list_ent
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  101 initializer: . expr
  102            | . '{' '}'

    error           shift, and go to state 359
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 182
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 183
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 61
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 184
    fcall_expr_list_ent  go to state 360
    pod_type_name        go to state 66
    initializer          go to state 188


state 287

   28 postfix_expr: postfix_expr '(' fcall_expr_list ')' .

    $default  reduce using rule 28 (postfix_expr)


state 288

   27 postfix_expr: postfix_expr '[' error ']' .

    $default  reduce using rule 27 (postfix_expr)


state 289

   26 postfix_expr: postfix_expr '[' expr ']' .

    $default  reduce using rule 26 (postfix_expr)


state 290

   69 cond_expr: binary_expr '?' ':' cond_expr .

    $default  reduce using rule 69 (cond_expr)


state 291

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   68          | binary_expr '?' expr ':' . cond_expr
   69          | . binary_expr '?' ':' cond_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 361
    pod_type_name     go to state 66


state 292

   30 postfix_expr: pod_type_name '(' expr ')' .

    $default  reduce using rule 30 (postfix_expr)


state 293

  248 pov_object_entry_list: error . ',' pov_object_entry

    ','  shift, and go to state 362


state 294

  241 pov_object_entry: "params" . '=' '{' pov_exprlist '}'

    '='  shift, and go to state 363


state 295

  242 pov_object_entry: "defs" . '=' '{' pov_assignment_list '}'

    '='  shift, and go to state 364


state 296

  239 pov_object_entry: "macro" . '=' name

    '='  shift, and go to state 365


state 297

  240 pov_object_entry: "declare" . '=' name

    '='  shift, and go to state 366


state 298

  243 pov_object_entry: "include" . '=' '{' pov_exprlist '}'

    '='  shift, and go to state 367


state 299

  244 pov_object_entry: "type" . '=' pov_expr

    '='  shift, and go to state 368


state 300

  245 pov_object_entry: "append_raw" . '=' pov_expr

    '='  shift, and go to state 369


state 301

  246 pov_object_entry_list: pov_object_entry .

    $default  reduce using rule 246 (pov_object_entry_list)


state 302

  247 pov_object_entry_list: pov_object_entry_list . ',' pov_object_entry
  249                      | pov_object_entry_list . ',' error ',' pov_object_entry
  250 pov_entry: '@' "@object" '(' pov_object_entry_list . ')'

    ','  shift, and go to state 370
    ')'  shift, and go to state 371


state 303

  251 pov_entry: '@' "@fileID" '=' name .

    $default  reduce using rule 251 (pov_entry)


state 304

   93 pod_type_name: "matrix" '<' expr ',' expr . '>'

    '>'  shift, and go to state 372


state 305

  187 object_def: "object" name '{' error '}' .

    $default  reduce using rule 187 (object_def)


state 306

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  172 function_def_nonstatic: . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  173                       | . type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | . type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  176 function_def: "static" . function_def_nonstatic

    "[identifier]"  shift, and go to state 5
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    identifier              go to state 19
    name_notabs             go to state 20
    name                    go to state 21
    pod_type_name           go to state 22
    type_name               go to state 307
    function_def_nonstatic  go to state 75


state 307

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
   98 bracket_bracket: . '[' ']'
   99 array_spec: . bracket_bracket
  100           | . array_spec bracket_bracket
  173 function_def_nonstatic: type_name . name_notabs '(' fdef_decl_list ')' function_mod compound_stmt
  174                       | type_name . array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt

    "[identifier]"  shift, and go to state 5
    '['             shift, and go to state 85

    identifier       go to state 19
    name_notabs      go to state 373
    bracket_bracket  go to state 87
    array_spec       go to state 88


state 308

  178 obj_function_def: "method" function_def .

    $default  reduce using rule 178 (obj_function_def)


state 309

  179 obj_function_def: '~' name_notabs . '(' ')' compound_stmt

    '('  shift, and go to state 374


state 310

  183 object_body_ne: object_body_ne object_body_ent .

    $default  reduce using rule 183 (object_body_ne)


state 311

  186 object_def: "object" name '{' object_body '}' .

    $default  reduce using rule 186 (object_def)


state 312

  196 setting_def: "setting" name '{' error '}' .

    $default  reduce using rule 196 (setting_def)


state 313

  192 setting_body_ne: setting_body_ne setting_body_ent .

    $default  reduce using rule 192 (setting_body_ne)


state 314

  195 setting_def: "setting" name '{' setting_body '}' .

    $default  reduce using rule 195 (setting_def)


state 315

  118 compound_stmt: '{' error '}' .

    $default  reduce using rule 118 (compound_stmt)


state 316

  158 statement: error ';' .

    $default  reduce using rule 158 (statement)


state 317

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  119 selection_stmt: "if" '(' . expr ')' statement
  120               | "if" '(' . error ')' statement
  121               | "if" '(' . expr ')' statement "else" statement
  122               | "if" '(' . error ')' statement "else" statement

    error           shift, and go to state 375
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 376
    pod_type_name     go to state 66


state 318

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  123 _for_init_stmt: . expr_stmt
  124               | . assign_stmt
  125               | . decl_stmt
  129 iteration_stmt: "for" '(' . _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 377
    _for_init_stmt       go to state 378
    assignment           go to state 252
    assign_stmt          go to state 379
    expr_stmt            go to state 380


state 319

  158 statement: error . ';'

    ';'  shift, and go to state 316


state 320

  132 iteration_stmt: "do" statement . "while" '(' expr ')' ';'
  133               | "do" statement . "while" '(' error ')' ';'

    "while"  shift, and go to state 381


state 321

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  130 iteration_stmt: "while" '(' . expr ')' statement
  131               | "while" '(' . error ')' statement

    error           shift, and go to state 382
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 383
    pod_type_name     go to state 66


state 322

  134 jump_stmt: "break" ';' .

    $default  reduce using rule 134 (jump_stmt)


state 323

  136 jump_stmt: "return" ';' .

    $default  reduce using rule 136 (jump_stmt)


state 324

  135 jump_stmt: "return" expr . ';'

    ';'  shift, and go to state 384


state 325

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   12 array_expr_list: . expr_list_ne
   13                | . ',' expr_list_ne
   14                | . expr_list_ne ','
   15                | . ',' expr_list_ne ','
   16 array: . '{' array_expr_list '}'
   16      | '{' . array_expr_list '}'
   17      | . '{' '.' '}'
   17      | '{' . '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   75 expr_list_ne: . expr
   76             | . expr_list_ne ',' expr
   77             | . error ',' expr
   78             | . expr_list_ne ',' error ',' expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  198 typed_scope: . identifier '{' typed_scope_list '}'
  199            | . identifier name '{' typed_scope_list '}'
  200            | . identifier '{' error '}'
  201            | . identifier name '{' error '}'
  202 typed_scope_expr: . typed_scope
  203 typed_scope_ent: . typed_scope_expr
  204                | . name '=' typed_scope_expr
  205                | . expr ';'
  206                | . name '=' expr ';'
  207 typed_scope_list_ne: . typed_scope_ent
  208                    | . typed_scope_list_ne typed_scope_ent
  209 typed_scope_list: .  ['}']
  210                 | . typed_scope_list_ne
  211 ani_block: '{' . typed_scope_list '}'
  212          | '{' . error '}'

    error           shift, and go to state 385
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '.'             shift, and go to state 105
    ','             shift, and go to state 106
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    '}'  reduce using rule 209 (typed_scope_list)

    literal              go to state 51
    identifier           go to state 386
    name_notabs          go to state 52
    name                 go to state 387
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array_expr_list      go to state 107
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 61
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 388
    expr_list_ne         go to state 108
    pod_type_name        go to state 66
    typed_scope          go to state 389
    typed_scope_expr     go to state 390
    typed_scope_ent      go to state 391
    typed_scope_list_ne  go to state 392
    typed_scope_list     go to state 393


state 326

   21 primary_expr: name .  ["++", "--", "->", "||", "&&", "==", "!=", "<=", ">=", "> ", '?', '<', '+', '-', '*', '/', '%', '^', '.', '{', '(', '[']
  148 ani_stmt: '%' name . ':' ani_block ';'
  149         | '%' name . ':' cond_expr ani_block ';'

    ':'  shift, and go to state 394

    $default  reduce using rule 21 (primary_expr)


state 327

  147 ani_stmt: '%' cond_expr . ani_block ';'
  211 ani_block: . '{' typed_scope_list '}'
  212          | . '{' error '}'

    '{'  shift, and go to state 395

    ani_block  go to state 396


state 328

  146 ani_stmt: '%' ani_block . ';'

    ';'  shift, and go to state 397


state 329

   77 expr_list_ne: error . ',' expr
  118 compound_stmt: '{' error . '}'
  158 statement: error . ';'

    ','  shift, and go to state 168
    '}'  shift, and go to state 315
    ';'  shift, and go to state 316


state 330

   75 expr_list_ne: expr .  [',', '}']
  145 expr_stmt: expr . ';'

    ';'  shift, and go to state 337

    $default  reduce using rule 75 (expr_list_ne)


state 331

  138 assign_op: "+=" .

    $default  reduce using rule 138 (assign_op)


state 332

  139 assign_op: "-=" .

    $default  reduce using rule 139 (assign_op)


state 333

  140 assign_op: "*=" .

    $default  reduce using rule 140 (assign_op)


state 334

  141 assign_op: "/=" .

    $default  reduce using rule 141 (assign_op)


state 335

  137 assign_op: '=' .

    $default  reduce using rule 137 (assign_op)


state 336

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  101 initializer: . expr
  102            | . '{' '}'
  142 assignment: unary_expr assign_op . initializer

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 182
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 184
    pod_type_name     go to state 66
    initializer       go to state 398


state 337

  145 expr_stmt: expr ';' .

    $default  reduce using rule 145 (expr_stmt)


state 338

  143 assign_stmt: assignment ';' .

    $default  reduce using rule 143 (assign_stmt)


state 339

  160 statement_list_ne: statement_list_ne statement .

    $default  reduce using rule 160 (statement_list_ne)


state 340

  117 compound_stmt: '{' statement_list '}' .

    $default  reduce using rule 117 (compound_stmt)


state 341

  166 fdef_decl_list_ne: error ',' fdef_decl_list_ent .

    $default  reduce using rule 166 (fdef_decl_list_ne)


state 342

  167 fdef_decl_list_ne: fdef_decl_list_ne ',' error . ',' fdef_decl_list_ent

    ','  shift, and go to state 399


state 343

  165 fdef_decl_list_ne: fdef_decl_list_ne ',' fdef_decl_list_ent .

    $default  reduce using rule 165 (fdef_decl_list_ne)


state 344

  171 function_mod: "const" .

    $default  reduce using rule 171 (function_mod)


state 345

  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  172 function_def_nonstatic: name_notabs '(' fdef_decl_list ')' function_mod . compound_stmt

    '{'  shift, and go to state 146

    compound_stmt  go to state 400


state 346

  170 function_mod: .  ['{']
  171             | . "const"
  173 function_def_nonstatic: type_name name_notabs '(' fdef_decl_list ')' . function_mod compound_stmt

    "const"  shift, and go to state 344

    $default  reduce using rule 170 (function_mod)

    function_mod  go to state 401


state 347

  174 function_def_nonstatic: type_name array_spec name_notabs '(' fdef_decl_list . ')' function_mod compound_stmt

    ')'  shift, and go to state 402


state 348

  105 declarator_noinit: declarator_noinit '[' error ']' .

    $default  reduce using rule 105 (declarator_noinit)


state 349

  104 declarator_noinit: declarator_noinit '[' expr ']' .

    $default  reduce using rule 104 (declarator_noinit)


state 350

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
  103 declarator_noinit: . name_notabs
  104                  | . declarator_noinit '[' expr ']'
  105                  | . declarator_noinit '[' error ']'
  106                  | . declarator_noinit '[' ']'
  107 declarator: . declarator_noinit
  108           | . declarator_noinit '=' initializer
  112 declarator_list_ne: declarator_list_ne ',' error ',' . declarator

    "[identifier]"  shift, and go to state 5

    identifier         go to state 19
    name_notabs        go to state 140
    declarator_noinit  go to state 89
    declarator         go to state 403


state 351

   48 unary_expr: "new" name '(' fcall_expr_list ')' .

    $default  reduce using rule 48 (unary_expr)


state 352

   43 new_array_spec: new_array_spec '[' error ']' .

    $default  reduce using rule 43 (new_array_spec)


state 353

   42 new_array_spec: new_array_spec '[' expr ']' .

    $default  reduce using rule 42 (new_array_spec)


state 354

   40 new_array_spec: type_name '[' expr ']' .

    $default  reduce using rule 40 (new_array_spec)


state 355

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   78 expr_list_ne: expr_list_ne ',' error ',' . expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 404
    pod_type_name     go to state 66


state 356

   59 binary_expr: '(' binary_expr '>' binary_expr ')' .

    $default  reduce using rule 59 (binary_expr)


state 357

   83 fcall_expr_list_ne: error ',' expr .

    $default  reduce using rule 83 (fcall_expr_list_ne)


state 358

   80 fcall_expr_list_ent: name '=' initializer .

    $default  reduce using rule 80 (fcall_expr_list_ent)


state 359

   84 fcall_expr_list_ne: fcall_expr_list_ne ',' error . ',' fcall_expr_list_ent

    ','  shift, and go to state 405


state 360

   82 fcall_expr_list_ne: fcall_expr_list_ne ',' fcall_expr_list_ent .

    $default  reduce using rule 82 (fcall_expr_list_ne)


state 361

   68 cond_expr: binary_expr '?' expr ':' cond_expr .

    $default  reduce using rule 68 (cond_expr)


state 362

  239 pov_object_entry: . "macro" '=' name
  240                 | . "declare" '=' name
  241                 | . "params" '=' '{' pov_exprlist '}'
  242                 | . "defs" '=' '{' pov_assignment_list '}'
  243                 | . "include" '=' '{' pov_exprlist '}'
  244                 | . "type" '=' pov_expr
  245                 | . "append_raw" '=' pov_expr
  248 pov_object_entry_list: error ',' . pov_object_entry

    "params"      shift, and go to state 294
    "defs"        shift, and go to state 295
    "macro"       shift, and go to state 296
    "declare"     shift, and go to state 297
    "include"     shift, and go to state 298
    "type"        shift, and go to state 299
    "append_raw"  shift, and go to state 300

    pov_object_entry  go to state 406


state 363

  241 pov_object_entry: "params" '=' . '{' pov_exprlist '}'

    '{'  shift, and go to state 407


state 364

  242 pov_object_entry: "defs" '=' . '{' pov_assignment_list '}'

    '{'  shift, and go to state 408


state 365

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  239 pov_object_entry: "macro" '=' . name

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier   go to state 19
    name_notabs  go to state 52
    name         go to state 409


state 366

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  240 pov_object_entry: "declare" '=' . name

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier   go to state 19
    name_notabs  go to state 52
    name         go to state 410


state 367

  243 pov_object_entry: "include" '=' . '{' pov_exprlist '}'

    '{'  shift, and go to state 411


state 368

  230 @1: .
  231 pov_expr: . @1 expr
  244 pov_object_entry: "type" '=' . pov_expr

    $default  reduce using rule 230 (@1)

    pov_expr  go to state 412
    @1        go to state 413


state 369

  230 @1: .
  231 pov_expr: . @1 expr
  245 pov_object_entry: "append_raw" '=' . pov_expr

    $default  reduce using rule 230 (@1)

    pov_expr  go to state 414
    @1        go to state 413


state 370

  239 pov_object_entry: . "macro" '=' name
  240                 | . "declare" '=' name
  241                 | . "params" '=' '{' pov_exprlist '}'
  242                 | . "defs" '=' '{' pov_assignment_list '}'
  243                 | . "include" '=' '{' pov_exprlist '}'
  244                 | . "type" '=' pov_expr
  245                 | . "append_raw" '=' pov_expr
  247 pov_object_entry_list: pov_object_entry_list ',' . pov_object_entry
  249                      | pov_object_entry_list ',' . error ',' pov_object_entry

    error         shift, and go to state 415
    "params"      shift, and go to state 294
    "defs"        shift, and go to state 295
    "macro"       shift, and go to state 296
    "declare"     shift, and go to state 297
    "include"     shift, and go to state 298
    "type"        shift, and go to state 299
    "append_raw"  shift, and go to state 300

    pov_object_entry  go to state 416


state 371

  250 pov_entry: '@' "@object" '(' pov_object_entry_list ')' .

    $default  reduce using rule 250 (pov_entry)


state 372

   93 pod_type_name: "matrix" '<' expr ',' expr '>' .

    $default  reduce using rule 93 (pod_type_name)


state 373

  173 function_def_nonstatic: type_name name_notabs . '(' fdef_decl_list ')' function_mod compound_stmt

    '('  shift, and go to state 156


state 374

  179 obj_function_def: '~' name_notabs '(' . ')' compound_stmt

    ')'  shift, and go to state 417


state 375

  120 selection_stmt: "if" '(' error . ')' statement
  122               | "if" '(' error . ')' statement "else" statement

    ')'  shift, and go to state 418


state 376

  119 selection_stmt: "if" '(' expr . ')' statement
  121               | "if" '(' expr . ')' statement "else" statement

    ')'  shift, and go to state 419


state 377

  125 _for_init_stmt: decl_stmt .

    $default  reduce using rule 125 (_for_init_stmt)


state 378

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  129 iteration_stmt: "for" '(' _for_init_stmt . expr_stmt _for_inc_stmt ')' statement
  144 expr_stmt: . ';'
  145          | . expr ';'

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 244
    pod_type_name     go to state 66
    expr_stmt         go to state 420


state 379

  124 _for_init_stmt: assign_stmt .

    $default  reduce using rule 124 (_for_init_stmt)


state 380

  123 _for_init_stmt: expr_stmt .

    $default  reduce using rule 123 (_for_init_stmt)


state 381

  132 iteration_stmt: "do" statement "while" . '(' expr ')' ';'
  133               | "do" statement "while" . '(' error ')' ';'

    '('  shift, and go to state 421


state 382

  131 iteration_stmt: "while" '(' error . ')' statement

    ')'  shift, and go to state 422


state 383

  130 iteration_stmt: "while" '(' expr . ')' statement

    ')'  shift, and go to state 423


state 384

  135 jump_stmt: "return" expr ';' .

    $default  reduce using rule 135 (jump_stmt)


state 385

   77 expr_list_ne: error . ',' expr
  212 ani_block: '{' error . '}'

    ','  shift, and go to state 168
    '}'  shift, and go to state 424


state 386

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier  ["++", "--", "->", "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '?', '<', '+', '-', '*', '/', '%', '^', '.', ',', '}', '(', '[', '=', ';']
    5            | identifier .  ["++", "--", "->", "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '?', '<', '+', '-', '*', '/', '%', '^', '.', ',', '}', '(', '[', '=', ';']
    6            | . identifier "::" name
    6            | identifier . "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  198 typed_scope: identifier . '{' typed_scope_list '}'
  199            | identifier . name '{' typed_scope_list '}'
  200            | identifier . '{' error '}'
  201            | identifier . name '{' error '}'

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 425
    '{'             shift, and go to state 426

    $default  reduce using rule 5 (name_notabs)

    identifier   go to state 19
    name_notabs  go to state 52
    name         go to state 427


state 387

   21 primary_expr: name .  ["++", "--", "->", "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '?', '<', '+', '-', '*', '/', '%', '^', '.', ',', '}', '(', '[', ';']
  204 typed_scope_ent: name . '=' typed_scope_expr
  206                | name . '=' expr ';'

    '='  shift, and go to state 428

    $default  reduce using rule 21 (primary_expr)


state 388

   75 expr_list_ne: expr .  [',', '}']
  205 typed_scope_ent: expr . ';'

    ';'  shift, and go to state 429

    $default  reduce using rule 75 (expr_list_ne)


state 389

  202 typed_scope_expr: typed_scope .

    $default  reduce using rule 202 (typed_scope_expr)


state 390

  203 typed_scope_ent: typed_scope_expr .

    $default  reduce using rule 203 (typed_scope_ent)


state 391

  207 typed_scope_list_ne: typed_scope_ent .

    $default  reduce using rule 207 (typed_scope_list_ne)


state 392

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  198 typed_scope: . identifier '{' typed_scope_list '}'
  199            | . identifier name '{' typed_scope_list '}'
  200            | . identifier '{' error '}'
  201            | . identifier name '{' error '}'
  202 typed_scope_expr: . typed_scope
  203 typed_scope_ent: . typed_scope_expr
  204                | . name '=' typed_scope_expr
  205                | . expr ';'
  206                | . name '=' expr ';'
  208 typed_scope_list_ne: typed_scope_list_ne . typed_scope_ent
  210 typed_scope_list: typed_scope_list_ne .  ['}']

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    $default  reduce using rule 210 (typed_scope_list)

    literal           go to state 51
    identifier        go to state 386
    name_notabs       go to state 52
    name              go to state 387
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 430
    pod_type_name     go to state 66
    typed_scope       go to state 389
    typed_scope_expr  go to state 390
    typed_scope_ent   go to state 431


state 393

  211 ani_block: '{' typed_scope_list . '}'

    '}'  shift, and go to state 432


state 394

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  148 ani_stmt: '%' name ':' . ani_block ';'
  149         | '%' name ':' . cond_expr ani_block ';'
  211 ani_block: . '{' typed_scope_list '}'
  212          | . '{' error '}'

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 325
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 433
    pod_type_name     go to state 66
    ani_block         go to state 434


state 395

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  198 typed_scope: . identifier '{' typed_scope_list '}'
  199            | . identifier name '{' typed_scope_list '}'
  200            | . identifier '{' error '}'
  201            | . identifier name '{' error '}'
  202 typed_scope_expr: . typed_scope
  203 typed_scope_ent: . typed_scope_expr
  204                | . name '=' typed_scope_expr
  205                | . expr ';'
  206                | . name '=' expr ';'
  207 typed_scope_list_ne: . typed_scope_ent
  208                    | . typed_scope_list_ne typed_scope_ent
  209 typed_scope_list: .  ['}']
  210                 | . typed_scope_list_ne
  211 ani_block: '{' . typed_scope_list '}'
  212          | '{' . error '}'

    error           shift, and go to state 435
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    '}'  reduce using rule 209 (typed_scope_list)

    literal              go to state 51
    identifier           go to state 386
    name_notabs          go to state 52
    name                 go to state 387
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 61
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 430
    pod_type_name        go to state 66
    typed_scope          go to state 389
    typed_scope_expr     go to state 390
    typed_scope_ent      go to state 391
    typed_scope_list_ne  go to state 392
    typed_scope_list     go to state 393


state 396

  147 ani_stmt: '%' cond_expr ani_block . ';'

    ';'  shift, and go to state 436


state 397

  146 ani_stmt: '%' ani_block ';' .

    $default  reduce using rule 146 (ani_stmt)


state 398

  142 assignment: unary_expr assign_op initializer .

    $default  reduce using rule 142 (assignment)


state 399

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  163 fdef_decl_list_ent: . type_name declarator
  167 fdef_decl_list_ne: fdef_decl_list_ne ',' error ',' . fdef_decl_list_ent

    "[identifier]"  shift, and go to state 5
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "::"            shift, and go to state 18

    identifier          go to state 19
    name_notabs         go to state 52
    name                go to state 21
    pod_type_name       go to state 22
    type_name           go to state 150
    fdef_decl_list_ent  go to state 437


state 400

  172 function_def_nonstatic: name_notabs '(' fdef_decl_list ')' function_mod compound_stmt .

    $default  reduce using rule 172 (function_def_nonstatic)


state 401

  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  173 function_def_nonstatic: type_name name_notabs '(' fdef_decl_list ')' function_mod . compound_stmt

    '{'  shift, and go to state 146

    compound_stmt  go to state 438


state 402

  170 function_mod: .  ['{']
  171             | . "const"
  174 function_def_nonstatic: type_name array_spec name_notabs '(' fdef_decl_list ')' . function_mod compound_stmt

    "const"  shift, and go to state 344

    $default  reduce using rule 170 (function_mod)

    function_mod  go to state 439


state 403

  112 declarator_list_ne: declarator_list_ne ',' error ',' declarator .

    $default  reduce using rule 112 (declarator_list_ne)


state 404

   78 expr_list_ne: expr_list_ne ',' error ',' expr .

    $default  reduce using rule 78 (expr_list_ne)


state 405

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   79 fcall_expr_list_ent: . initializer
   80                    | . name '=' initializer
   84 fcall_expr_list_ne: fcall_expr_list_ne ',' error ',' . fcall_expr_list_ent
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  101 initializer: . expr
  102            | . '{' '}'

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 182
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 183
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 61
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 184
    fcall_expr_list_ent  go to state 440
    pod_type_name        go to state 66
    initializer          go to state 188


state 406

  248 pov_object_entry_list: error ',' pov_object_entry .

    $default  reduce using rule 248 (pov_object_entry_list)


state 407

  224 pov_exprlist: .  ['}']
  225             | . pov_exprlist_ne
  226 pov_exprlist_ne: . pov_expr
  227                | . pov_exprlist_ne ',' pov_expr
  228                | . error ',' pov_expr
  229                | . pov_exprlist_ne ',' error ',' pov_expr
  230 @1: .  ["[integer]", "[scalar]", "[string]", "[identifier]", "new", "delete", "int", "scalar", "range", "vector", "matrix", "string", "this", "NULL", "++", "--", "::", "..", '<', '+', '-', '{', '(', '!']
  231 pov_expr: . @1 expr
  241 pov_object_entry: "params" '=' '{' . pov_exprlist '}'

    error  shift, and go to state 441

    "[integer]"     reduce using rule 230 (@1)
    "[scalar]"      reduce using rule 230 (@1)
    "[string]"      reduce using rule 230 (@1)
    "[identifier]"  reduce using rule 230 (@1)
    "new"           reduce using rule 230 (@1)
    "delete"        reduce using rule 230 (@1)
    "int"           reduce using rule 230 (@1)
    "scalar"        reduce using rule 230 (@1)
    "range"         reduce using rule 230 (@1)
    "vector"        reduce using rule 230 (@1)
    "matrix"        reduce using rule 230 (@1)
    "string"        reduce using rule 230 (@1)
    "this"          reduce using rule 230 (@1)
    "NULL"          reduce using rule 230 (@1)
    "++"            reduce using rule 230 (@1)
    "--"            reduce using rule 230 (@1)
    "::"            reduce using rule 230 (@1)
    ".."            reduce using rule 230 (@1)
    '<'             reduce using rule 230 (@1)
    '+'             reduce using rule 230 (@1)
    '-'             reduce using rule 230 (@1)
    '{'             reduce using rule 230 (@1)
    '}'             reduce using rule 224 (pov_exprlist)
    '('             reduce using rule 230 (@1)
    '!'             reduce using rule 230 (@1)

    pov_exprlist     go to state 442
    pov_exprlist_ne  go to state 443
    pov_expr         go to state 444
    @1               go to state 413


state 408

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  232 pov_assignment_list: .  ['}']
  233                    | . pov_assignment_list_ne
  234 pov_assignment_list_ne: . pov_assignment_list_ent
  235                       | . pov_assignment_list_ne ',' pov_assignment_list_ent
  236                       | . error ',' pov_assignment_list_ent
  237                       | . pov_assignment_list_ne ',' error ',' pov_assignment_list_ent
  238 pov_assignment_list_ent: . name '=' pov_expr
  242 pov_object_entry: "defs" '=' '{' . pov_assignment_list '}'

    error           shift, and go to state 445
    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    '}'  reduce using rule 232 (pov_assignment_list)

    identifier               go to state 19
    name_notabs              go to state 52
    name                     go to state 446
    pov_assignment_list      go to state 447
    pov_assignment_list_ne   go to state 448
    pov_assignment_list_ent  go to state 449


state 409

  239 pov_object_entry: "macro" '=' name .

    $default  reduce using rule 239 (pov_object_entry)


state 410

  240 pov_object_entry: "declare" '=' name .

    $default  reduce using rule 240 (pov_object_entry)


state 411

  224 pov_exprlist: .  ['}']
  225             | . pov_exprlist_ne
  226 pov_exprlist_ne: . pov_expr
  227                | . pov_exprlist_ne ',' pov_expr
  228                | . error ',' pov_expr
  229                | . pov_exprlist_ne ',' error ',' pov_expr
  230 @1: .  ["[integer]", "[scalar]", "[string]", "[identifier]", "new", "delete", "int", "scalar", "range", "vector", "matrix", "string", "this", "NULL", "++", "--", "::", "..", '<', '+', '-', '{', '(', '!']
  231 pov_expr: . @1 expr
  243 pov_object_entry: "include" '=' '{' . pov_exprlist '}'

    error  shift, and go to state 441

    "[integer]"     reduce using rule 230 (@1)
    "[scalar]"      reduce using rule 230 (@1)
    "[string]"      reduce using rule 230 (@1)
    "[identifier]"  reduce using rule 230 (@1)
    "new"           reduce using rule 230 (@1)
    "delete"        reduce using rule 230 (@1)
    "int"           reduce using rule 230 (@1)
    "scalar"        reduce using rule 230 (@1)
    "range"         reduce using rule 230 (@1)
    "vector"        reduce using rule 230 (@1)
    "matrix"        reduce using rule 230 (@1)
    "string"        reduce using rule 230 (@1)
    "this"          reduce using rule 230 (@1)
    "NULL"          reduce using rule 230 (@1)
    "++"            reduce using rule 230 (@1)
    "--"            reduce using rule 230 (@1)
    "::"            reduce using rule 230 (@1)
    ".."            reduce using rule 230 (@1)
    '<'             reduce using rule 230 (@1)
    '+'             reduce using rule 230 (@1)
    '-'             reduce using rule 230 (@1)
    '{'             reduce using rule 230 (@1)
    '}'             reduce using rule 224 (pov_exprlist)
    '('             reduce using rule 230 (@1)
    '!'             reduce using rule 230 (@1)

    pov_exprlist     go to state 450
    pov_exprlist_ne  go to state 443
    pov_expr         go to state 444
    @1               go to state 413


state 412

  244 pov_object_entry: "type" '=' pov_expr .

    $default  reduce using rule 244 (pov_object_entry)


state 413

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  231 pov_expr: @1 . expr

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 451
    pod_type_name     go to state 66


state 414

  245 pov_object_entry: "append_raw" '=' pov_expr .

    $default  reduce using rule 245 (pov_object_entry)


state 415

  249 pov_object_entry_list: pov_object_entry_list ',' error . ',' pov_object_entry

    ','  shift, and go to state 452


state 416

  247 pov_object_entry_list: pov_object_entry_list ',' pov_object_entry .

    $default  reduce using rule 247 (pov_object_entry_list)


state 417

  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  179 obj_function_def: '~' name_notabs '(' ')' . compound_stmt

    '{'  shift, and go to state 146

    compound_stmt  go to state 453


state 418

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  120               | "if" '(' error ')' . statement
  121               | . "if" '(' expr ')' statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  122               | "if" '(' error ')' . statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'

    error           shift, and go to state 319
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 454


state 419

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  119               | "if" '(' expr ')' . statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  121               | "if" '(' expr ')' . statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'

    error           shift, and go to state 319
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 455


state 420

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  126 _for_inc_stmt: .  [')']
  127              | . expr
  128              | . assignment
  129 iteration_stmt: "for" '(' _for_init_stmt expr_stmt . _for_inc_stmt ')' statement
  142 assignment: . unary_expr assign_op initializer

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    $default  reduce using rule 126 (_for_inc_stmt)

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 243
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 456
    pod_type_name     go to state 66
    _for_inc_stmt     go to state 457
    assignment        go to state 458


state 421

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  132 iteration_stmt: "do" statement "while" '(' . expr ')' ';'
  133               | "do" statement "while" '(' . error ')' ';'

    error           shift, and go to state 459
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 19
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 460
    pod_type_name     go to state 66


state 422

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  131               | "while" '(' error ')' . statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'

    error           shift, and go to state 319
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 461


state 423

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  130               | "while" '(' expr ')' . statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'

    error           shift, and go to state 319
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 462


state 424

  212 ani_block: '{' error '}' .

    $default  reduce using rule 212 (ani_block)


state 425

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    6            | identifier "::" . name
    7 name: . name_notabs
    8     | . "::" name_notabs
    8     | "::" . name_notabs

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier   go to state 19
    name_notabs  go to state 463
    name         go to state 148


state 426

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  198 typed_scope: . identifier '{' typed_scope_list '}'
  198            | identifier '{' . typed_scope_list '}'
  199            | . identifier name '{' typed_scope_list '}'
  200            | . identifier '{' error '}'
  200            | identifier '{' . error '}'
  201            | . identifier name '{' error '}'
  202 typed_scope_expr: . typed_scope
  203 typed_scope_ent: . typed_scope_expr
  204                | . name '=' typed_scope_expr
  205                | . expr ';'
  206                | . name '=' expr ';'
  207 typed_scope_list_ne: . typed_scope_ent
  208                    | . typed_scope_list_ne typed_scope_ent
  209 typed_scope_list: .  ['}']
  210                 | . typed_scope_list_ne

    error           shift, and go to state 464
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    '}'  reduce using rule 209 (typed_scope_list)

    literal              go to state 51
    identifier           go to state 386
    name_notabs          go to state 52
    name                 go to state 387
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 61
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 430
    pod_type_name        go to state 66
    typed_scope          go to state 389
    typed_scope_expr     go to state 390
    typed_scope_ent      go to state 391
    typed_scope_list_ne  go to state 392
    typed_scope_list     go to state 465


state 427

  199 typed_scope: identifier name . '{' typed_scope_list '}'
  201            | identifier name . '{' error '}'

    '{'  shift, and go to state 466


state 428

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  198 typed_scope: . identifier '{' typed_scope_list '}'
  199            | . identifier name '{' typed_scope_list '}'
  200            | . identifier '{' error '}'
  201            | . identifier name '{' error '}'
  202 typed_scope_expr: . typed_scope
  204 typed_scope_ent: name '=' . typed_scope_expr
  206                | name '=' . expr ';'

    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    literal           go to state 51
    identifier        go to state 386
    name_notabs       go to state 52
    name              go to state 53
    builtin_name_raw  go to state 54
    builtin_name      go to state 55
    vector            go to state 56
    array             go to state 57
    primary_expr      go to state 58
    postfix_expr      go to state 59
    unary_op          go to state 60
    unary_expr        go to state 61
    binary_expr       go to state 62
    cond_expr         go to state 63
    range_expr        go to state 64
    expr              go to state 467
    pod_type_name     go to state 66
    typed_scope       go to state 389
    typed_scope_expr  go to state 468


state 429

  205 typed_scope_ent: expr ';' .

    $default  reduce using rule 205 (typed_scope_ent)


state 430

  205 typed_scope_ent: expr . ';'

    ';'  shift, and go to state 429


state 431

  208 typed_scope_list_ne: typed_scope_list_ne typed_scope_ent .

    $default  reduce using rule 208 (typed_scope_list_ne)


state 432

  211 ani_block: '{' typed_scope_list '}' .

    $default  reduce using rule 211 (ani_block)


state 433

  149 ani_stmt: '%' name ':' cond_expr . ani_block ';'
  211 ani_block: . '{' typed_scope_list '}'
  212          | . '{' error '}'

    '{'  shift, and go to state 395

    ani_block  go to state 469


state 434

  148 ani_stmt: '%' name ':' ani_block . ';'

    ';'  shift, and go to state 470


state 435

  212 ani_block: '{' error . '}'

    '}'  shift, and go to state 424


state 436

  147 ani_stmt: '%' cond_expr ani_block ';' .

    $default  reduce using rule 147 (ani_stmt)


state 437

  167 fdef_decl_list_ne: fdef_decl_list_ne ',' error ',' fdef_decl_list_ent .

    $default  reduce using rule 167 (fdef_decl_list_ne)


state 438

  173 function_def_nonstatic: type_name name_notabs '(' fdef_decl_list ')' function_mod compound_stmt .

    $default  reduce using rule 173 (function_def_nonstatic)


state 439

  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  174 function_def_nonstatic: type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod . compound_stmt

    '{'  shift, and go to state 146

    compound_stmt  go to state 471


state 440

   84 fcall_expr_list_ne: fcall_expr_list_ne ',' error ',' fcall_expr_list_ent .

    $default  reduce using rule 84 (fcall_expr_list_ne)


state 441

  228 pov_exprlist_ne: error . ',' pov_expr

    ','  shift, and go to state 472


state 442

  241 pov_object_entry: "params" '=' '{' pov_exprlist . '}'

    '}'  shift, and go to state 473


state 443

  225 pov_exprlist: pov_exprlist_ne .  ['}']
  227 pov_exprlist_ne: pov_exprlist_ne . ',' pov_expr
  229                | pov_exprlist_ne . ',' error ',' pov_expr

    ','  shift, and go to state 474

    $default  reduce using rule 225 (pov_exprlist)


state 444

  226 pov_exprlist_ne: pov_expr .

    $default  reduce using rule 226 (pov_exprlist_ne)


state 445

  236 pov_assignment_list_ne: error . ',' pov_assignment_list_ent

    ','  shift, and go to state 475


state 446

  238 pov_assignment_list_ent: name . '=' pov_expr

    '='  shift, and go to state 476


state 447

  242 pov_object_entry: "defs" '=' '{' pov_assignment_list . '}'

    '}'  shift, and go to state 477


state 448

  233 pov_assignment_list: pov_assignment_list_ne .  ['}']
  235 pov_assignment_list_ne: pov_assignment_list_ne . ',' pov_assignment_list_ent
  237                       | pov_assignment_list_ne . ',' error ',' pov_assignment_list_ent

    ','  shift, and go to state 478

    $default  reduce using rule 233 (pov_assignment_list)


state 449

  234 pov_assignment_list_ne: pov_assignment_list_ent .

    $default  reduce using rule 234 (pov_assignment_list_ne)


state 450

  243 pov_object_entry: "include" '=' '{' pov_exprlist . '}'

    '}'  shift, and go to state 479


state 451

  231 pov_expr: @1 expr .

    $default  reduce using rule 231 (pov_expr)


state 452

  239 pov_object_entry: . "macro" '=' name
  240                 | . "declare" '=' name
  241                 | . "params" '=' '{' pov_exprlist '}'
  242                 | . "defs" '=' '{' pov_assignment_list '}'
  243                 | . "include" '=' '{' pov_exprlist '}'
  244                 | . "type" '=' pov_expr
  245                 | . "append_raw" '=' pov_expr
  249 pov_object_entry_list: pov_object_entry_list ',' error ',' . pov_object_entry

    "params"      shift, and go to state 294
    "defs"        shift, and go to state 295
    "macro"       shift, and go to state 296
    "declare"     shift, and go to state 297
    "include"     shift, and go to state 298
    "type"        shift, and go to state 299
    "append_raw"  shift, and go to state 300

    pov_object_entry  go to state 480


state 453

  179 obj_function_def: '~' name_notabs '(' ')' compound_stmt .

    $default  reduce using rule 179 (obj_function_def)


state 454

  120 selection_stmt: "if" '(' error ')' statement .  [error, "[integer]", "[scalar]", "[string]", "[identifier]", "new", "delete", "if", "else", "for", "do", "while", "break", "return", "const", "static", "int", "scalar", "range", "vector", "matrix", "string", "anyobj", "this", "NULL", "++", "--", "::", "..", '<', '+', '-', '%', '{', '}', '(', '!', ';']
  122               | "if" '(' error ')' statement . "else" statement

    "else"  shift, and go to state 481

    "else"    [reduce using rule 120 (selection_stmt)]
    $default  reduce using rule 120 (selection_stmt)


state 455

  119 selection_stmt: "if" '(' expr ')' statement .  [error, "[integer]", "[scalar]", "[string]", "[identifier]", "new", "delete", "if", "else", "for", "do", "while", "break", "return", "const", "static", "int", "scalar", "range", "vector", "matrix", "string", "anyobj", "this", "NULL", "++", "--", "::", "..", '<', '+', '-', '%', '{', '}', '(', '!', ';']
  121               | "if" '(' expr ')' statement . "else" statement

    "else"  shift, and go to state 482

    "else"    [reduce using rule 119 (selection_stmt)]
    $default  reduce using rule 119 (selection_stmt)


state 456

  127 _for_inc_stmt: expr .

    $default  reduce using rule 127 (_for_inc_stmt)


state 457

  129 iteration_stmt: "for" '(' _for_init_stmt expr_stmt _for_inc_stmt . ')' statement

    ')'  shift, and go to state 483


state 458

  128 _for_inc_stmt: assignment .

    $default  reduce using rule 128 (_for_inc_stmt)


state 459

  133 iteration_stmt: "do" statement "while" '(' error . ')' ';'

    ')'  shift, and go to state 484


state 460

  132 iteration_stmt: "do" statement "while" '(' expr . ')' ';'

    ')'  shift, and go to state 485


state 461

  131 iteration_stmt: "while" '(' error ')' statement .

    $default  reduce using rule 131 (iteration_stmt)


state 462

  130 iteration_stmt: "while" '(' expr ')' statement .

    $default  reduce using rule 130 (iteration_stmt)


state 463

    7 name: name_notabs .  ["++", "--", "->", "..", "||", "&&", "==", "!=", "<=", ">=", "> ", '?', '<', '+', '-', '*', '/', '%', '^', '.', ',', '}', '(', '[', '=', ';']
    8     | "::" name_notabs .  ['{']

    '{'       reduce using rule 8 (name)
    $default  reduce using rule 7 (name)


state 464

  200 typed_scope: identifier '{' error . '}'

    '}'  shift, and go to state 486


state 465

  198 typed_scope: identifier '{' typed_scope_list . '}'

    '}'  shift, and go to state 487


state 466

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
  198 typed_scope: . identifier '{' typed_scope_list '}'
  199            | . identifier name '{' typed_scope_list '}'
  199            | identifier name '{' . typed_scope_list '}'
  200            | . identifier '{' error '}'
  201            | . identifier name '{' error '}'
  201            | identifier name '{' . error '}'
  202 typed_scope_expr: . typed_scope
  203 typed_scope_ent: . typed_scope_expr
  204                | . name '=' typed_scope_expr
  205                | . expr ';'
  206                | . name '=' expr ';'
  207 typed_scope_list_ne: . typed_scope_ent
  208                    | . typed_scope_list_ne typed_scope_ent
  209 typed_scope_list: .  ['}']
  210                 | . typed_scope_list_ne

    error           shift, and go to state 488
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '{'             shift, and go to state 48
    '('             shift, and go to state 49
    '!'             shift, and go to state 50

    '}'  reduce using rule 209 (typed_scope_list)

    literal              go to state 51
    identifier           go to state 386
    name_notabs          go to state 52
    name                 go to state 387
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 61
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 430
    pod_type_name        go to state 66
    typed_scope          go to state 389
    typed_scope_expr     go to state 390
    typed_scope_ent      go to state 391
    typed_scope_list_ne  go to state 392
    typed_scope_list     go to state 489


state 467

  206 typed_scope_ent: name '=' expr . ';'

    ';'  shift, and go to state 490


state 468

  204 typed_scope_ent: name '=' typed_scope_expr .

    $default  reduce using rule 204 (typed_scope_ent)


state 469

  149 ani_stmt: '%' name ':' cond_expr ani_block . ';'

    ';'  shift, and go to state 491


state 470

  148 ani_stmt: '%' name ':' ani_block ';' .

    $default  reduce using rule 148 (ani_stmt)


state 471

  174 function_def_nonstatic: type_name array_spec name_notabs '(' fdef_decl_list ')' function_mod compound_stmt .

    $default  reduce using rule 174 (function_def_nonstatic)


state 472

  228 pov_exprlist_ne: error ',' . pov_expr
  230 @1: .
  231 pov_expr: . @1 expr

    $default  reduce using rule 230 (@1)

    pov_expr  go to state 492
    @1        go to state 413


state 473

  241 pov_object_entry: "params" '=' '{' pov_exprlist '}' .

    $default  reduce using rule 241 (pov_object_entry)


state 474

  227 pov_exprlist_ne: pov_exprlist_ne ',' . pov_expr
  229                | pov_exprlist_ne ',' . error ',' pov_expr
  230 @1: .  ["[integer]", "[scalar]", "[string]", "[identifier]", "new", "delete", "int", "scalar", "range", "vector", "matrix", "string", "this", "NULL", "++", "--", "::", "..", '<', '+', '-', '{', '(', '!']
  231 pov_expr: . @1 expr

    error  shift, and go to state 493

    "[integer]"     reduce using rule 230 (@1)
    "[scalar]"      reduce using rule 230 (@1)
    "[string]"      reduce using rule 230 (@1)
    "[identifier]"  reduce using rule 230 (@1)
    "new"           reduce using rule 230 (@1)
    "delete"        reduce using rule 230 (@1)
    "int"           reduce using rule 230 (@1)
    "scalar"        reduce using rule 230 (@1)
    "range"         reduce using rule 230 (@1)
    "vector"        reduce using rule 230 (@1)
    "matrix"        reduce using rule 230 (@1)
    "string"        reduce using rule 230 (@1)
    "this"          reduce using rule 230 (@1)
    "NULL"          reduce using rule 230 (@1)
    "++"            reduce using rule 230 (@1)
    "--"            reduce using rule 230 (@1)
    "::"            reduce using rule 230 (@1)
    ".."            reduce using rule 230 (@1)
    '<'             reduce using rule 230 (@1)
    '+'             reduce using rule 230 (@1)
    '-'             reduce using rule 230 (@1)
    '{'             reduce using rule 230 (@1)
    '('             reduce using rule 230 (@1)
    '!'             reduce using rule 230 (@1)

    pov_expr  go to state 494
    @1        go to state 413


state 475

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  236 pov_assignment_list_ne: error ',' . pov_assignment_list_ent
  238 pov_assignment_list_ent: . name '=' pov_expr

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier               go to state 19
    name_notabs              go to state 52
    name                     go to state 446
    pov_assignment_list_ent  go to state 495


state 476

  230 @1: .
  231 pov_expr: . @1 expr
  238 pov_assignment_list_ent: name '=' . pov_expr

    $default  reduce using rule 230 (@1)

    pov_expr  go to state 496
    @1        go to state 413


state 477

  242 pov_object_entry: "defs" '=' '{' pov_assignment_list '}' .

    $default  reduce using rule 242 (pov_object_entry)


state 478

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  235 pov_assignment_list_ne: pov_assignment_list_ne ',' . pov_assignment_list_ent
  237                       | pov_assignment_list_ne ',' . error ',' pov_assignment_list_ent
  238 pov_assignment_list_ent: . name '=' pov_expr

    error           shift, and go to state 497
    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier               go to state 19
    name_notabs              go to state 52
    name                     go to state 446
    pov_assignment_list_ent  go to state 498


state 479

  243 pov_object_entry: "include" '=' '{' pov_exprlist '}' .

    $default  reduce using rule 243 (pov_object_entry)


state 480

  249 pov_object_entry_list: pov_object_entry_list ',' error ',' pov_object_entry .

    $default  reduce using rule 249 (pov_object_entry_list)


state 481

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  122               | "if" '(' error ')' statement "else" . statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'

    error           shift, and go to state 319
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 499


state 482

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  121               | "if" '(' expr ')' statement "else" . statement
  122               | . "if" '(' error ')' statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'

    error           shift, and go to state 319
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 500


state 483

    1 literal: . "[integer]"
    2        | . "[scalar]"
    3        | . "[string]"
    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
    9 builtin_name_raw: . "this"
   10 builtin_name: . builtin_name_raw
   11 vector: . '<' expr_list_ne '>'
   16 array: . '{' array_expr_list '}'
   17      | . '{' '.' '}'
   18 primary_expr: . literal
   19             | . vector
   20             | . array
   21             | . name
   22             | . builtin_name
   23             | . '(' expr ')'
   24             | . "NULL"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr '[' expr ']'
   27             | . postfix_expr '[' error ']'
   28             | . postfix_expr '(' fcall_expr_list ')'
   29             | . postfix_expr '(' error ')'
   30             | . pod_type_name '(' expr ')'
   31             | . postfix_expr '.' name
   32             | . postfix_expr '.' builtin_name
   33             | . postfix_expr "->" name
   34             | . postfix_expr "->" builtin_name
   35             | . postfix_expr "++"
   36             | . postfix_expr "--"
   37 unary_op: . '+'
   38         | . '-'
   39         | . '!'
   44 unary_expr: . postfix_expr
   45           | . "++" unary_expr
   46           | . "--" unary_expr
   47           | . unary_op unary_expr
   48           | . "new" name '(' fcall_expr_list ')'
   49           | . "new" new_array_spec
   50           | . "delete" unary_expr
   51 binary_expr: . unary_expr
   52            | . binary_expr '^' binary_expr
   53            | . binary_expr '*' binary_expr
   54            | . binary_expr '/' binary_expr
   55            | . binary_expr '%' binary_expr
   56            | . binary_expr '+' binary_expr
   57            | . binary_expr '-' binary_expr
   58            | . binary_expr '<' binary_expr
   59            | . '(' binary_expr '>' binary_expr ')'
   60            | . binary_expr "> " binary_expr
   61            | . binary_expr "<=" binary_expr
   62            | . binary_expr ">=" binary_expr
   63            | . binary_expr "==" binary_expr
   64            | . binary_expr "!=" binary_expr
   65            | . binary_expr "&&" binary_expr
   66            | . binary_expr "||" binary_expr
   67 cond_expr: . binary_expr
   68          | . binary_expr '?' expr ':' cond_expr
   69          | . binary_expr '?' ':' cond_expr
   70 range_expr: . cond_expr
   71           | . cond_expr ".." cond_expr
   72           | . ".." cond_expr
   73           | . cond_expr ".."
   74 expr: . range_expr
   87 pod_type_name: . "int"
   88              | . "scalar"
   89              | . "range"
   90              | . "vector"
   91              | . "vector" '<' expr '>'
   92              | . "matrix"
   93              | . "matrix" '<' expr ',' expr '>'
   94              | . "string"
   95 type_name: . pod_type_name
   96          | . name
   97          | . "anyobj"
  113 decl_stmt_nonstatic: . type_name declarator_list_ne ';'
  114                    | . "const" type_name declarator_list_ne ';'
  115 decl_stmt: . decl_stmt_nonstatic
  116          | . "static" decl_stmt_nonstatic
  117 compound_stmt: . '{' statement_list '}'
  118              | . '{' error '}'
  119 selection_stmt: . "if" '(' expr ')' statement
  120               | . "if" '(' error ')' statement
  121               | . "if" '(' expr ')' statement "else" statement
  122               | . "if" '(' error ')' statement "else" statement
  129 iteration_stmt: . "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement
  129               | "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' . statement
  130               | . "while" '(' expr ')' statement
  131               | . "while" '(' error ')' statement
  132               | . "do" statement "while" '(' expr ')' ';'
  133               | . "do" statement "while" '(' error ')' ';'
  134 jump_stmt: . "break" ';'
  135          | . "return" expr ';'
  136          | . "return" ';'
  142 assignment: . unary_expr assign_op initializer
  143 assign_stmt: . assignment ';'
  144 expr_stmt: . ';'
  145          | . expr ';'
  146 ani_stmt: . '%' ani_block ';'
  147         | . '%' cond_expr ani_block ';'
  148         | . '%' name ':' ani_block ';'
  149         | . '%' name ':' cond_expr ani_block ';'
  150 statement: . expr_stmt
  151          | . assign_stmt
  152          | . decl_stmt
  153          | . compound_stmt
  154          | . selection_stmt
  155          | . iteration_stmt
  156          | . jump_stmt
  157          | . ani_stmt
  158          | . error ';'

    error           shift, and go to state 319
    "[integer]"     shift, and go to state 35
    "[scalar]"      shift, and go to state 36
    "[string]"      shift, and go to state 37
    "[identifier]"  shift, and go to state 5
    "new"           shift, and go to state 38
    "delete"        shift, and go to state 39
    "if"            shift, and go to state 232
    "for"           shift, and go to state 233
    "do"            shift, and go to state 234
    "while"         shift, and go to state 235
    "break"         shift, and go to state 236
    "return"        shift, and go to state 237
    "const"         shift, and go to state 6
    "static"        shift, and go to state 238
    "int"           shift, and go to state 8
    "scalar"        shift, and go to state 9
    "range"         shift, and go to state 10
    "vector"        shift, and go to state 11
    "matrix"        shift, and go to state 12
    "string"        shift, and go to state 13
    "anyobj"        shift, and go to state 14
    "this"          shift, and go to state 40
    "NULL"          shift, and go to state 41
    "++"            shift, and go to state 42
    "--"            shift, and go to state 43
    "::"            shift, and go to state 18
    ".."            shift, and go to state 44
    '<'             shift, and go to state 45
    '+'             shift, and go to state 46
    '-'             shift, and go to state 47
    '%'             shift, and go to state 239
    '{'             shift, and go to state 240
    '('             shift, and go to state 49
    '!'             shift, and go to state 50
    ';'             shift, and go to state 241

    literal              go to state 51
    identifier           go to state 19
    name_notabs          go to state 52
    name                 go to state 242
    builtin_name_raw     go to state 54
    builtin_name         go to state 55
    vector               go to state 56
    array                go to state 57
    primary_expr         go to state 58
    postfix_expr         go to state 59
    unary_op             go to state 60
    unary_expr           go to state 243
    binary_expr          go to state 62
    cond_expr            go to state 63
    range_expr           go to state 64
    expr                 go to state 244
    pod_type_name        go to state 245
    type_name            go to state 246
    decl_stmt_nonstatic  go to state 24
    decl_stmt            go to state 247
    compound_stmt        go to state 248
    selection_stmt       go to state 249
    iteration_stmt       go to state 250
    jump_stmt            go to state 251
    assignment           go to state 252
    assign_stmt          go to state 253
    expr_stmt            go to state 254
    ani_stmt             go to state 255
    statement            go to state 501


state 484

  133 iteration_stmt: "do" statement "while" '(' error ')' . ';'

    ';'  shift, and go to state 502


state 485

  132 iteration_stmt: "do" statement "while" '(' expr ')' . ';'

    ';'  shift, and go to state 503


state 486

  200 typed_scope: identifier '{' error '}' .

    $default  reduce using rule 200 (typed_scope)


state 487

  198 typed_scope: identifier '{' typed_scope_list '}' .

    $default  reduce using rule 198 (typed_scope)


state 488

  201 typed_scope: identifier name '{' error . '}'

    '}'  shift, and go to state 504


state 489

  199 typed_scope: identifier name '{' typed_scope_list . '}'

    '}'  shift, and go to state 505


state 490

  206 typed_scope_ent: name '=' expr ';' .

    $default  reduce using rule 206 (typed_scope_ent)


state 491

  149 ani_stmt: '%' name ':' cond_expr ani_block ';' .

    $default  reduce using rule 149 (ani_stmt)


state 492

  228 pov_exprlist_ne: error ',' pov_expr .

    $default  reduce using rule 228 (pov_exprlist_ne)


state 493

  229 pov_exprlist_ne: pov_exprlist_ne ',' error . ',' pov_expr

    ','  shift, and go to state 506


state 494

  227 pov_exprlist_ne: pov_exprlist_ne ',' pov_expr .

    $default  reduce using rule 227 (pov_exprlist_ne)


state 495

  236 pov_assignment_list_ne: error ',' pov_assignment_list_ent .

    $default  reduce using rule 236 (pov_assignment_list_ne)


state 496

  238 pov_assignment_list_ent: name '=' pov_expr .

    $default  reduce using rule 238 (pov_assignment_list_ent)


state 497

  237 pov_assignment_list_ne: pov_assignment_list_ne ',' error . ',' pov_assignment_list_ent

    ','  shift, and go to state 507


state 498

  235 pov_assignment_list_ne: pov_assignment_list_ne ',' pov_assignment_list_ent .

    $default  reduce using rule 235 (pov_assignment_list_ne)


state 499

  122 selection_stmt: "if" '(' error ')' statement "else" statement .

    $default  reduce using rule 122 (selection_stmt)


state 500

  121 selection_stmt: "if" '(' expr ')' statement "else" statement .

    $default  reduce using rule 121 (selection_stmt)


state 501

  129 iteration_stmt: "for" '(' _for_init_stmt expr_stmt _for_inc_stmt ')' statement .

    $default  reduce using rule 129 (iteration_stmt)


state 502

  133 iteration_stmt: "do" statement "while" '(' error ')' ';' .

    $default  reduce using rule 133 (iteration_stmt)


state 503

  132 iteration_stmt: "do" statement "while" '(' expr ')' ';' .

    $default  reduce using rule 132 (iteration_stmt)


state 504

  201 typed_scope: identifier name '{' error '}' .

    $default  reduce using rule 201 (typed_scope)


state 505

  199 typed_scope: identifier name '{' typed_scope_list '}' .

    $default  reduce using rule 199 (typed_scope)


state 506

  229 pov_exprlist_ne: pov_exprlist_ne ',' error ',' . pov_expr
  230 @1: .
  231 pov_expr: . @1 expr

    $default  reduce using rule 230 (@1)

    pov_expr  go to state 508
    @1        go to state 413


state 507

    4 identifier: . "[identifier]"
    5 name_notabs: . identifier
    6            | . identifier "::" name
    7 name: . name_notabs
    8     | . "::" name_notabs
  237 pov_assignment_list_ne: pov_assignment_list_ne ',' error ',' . pov_assignment_list_ent
  238 pov_assignment_list_ent: . name '=' pov_expr

    "[identifier]"  shift, and go to state 5
    "::"            shift, and go to state 18

    identifier               go to state 19
    name_notabs              go to state 52
    name                     go to state 446
    pov_assignment_list_ent  go to state 509


state 508

  229 pov_exprlist_ne: pov_exprlist_ne ',' error ',' pov_expr .

    $default  reduce using rule 229 (pov_exprlist_ne)


state 509

  237 pov_assignment_list_ne: pov_assignment_list_ne ',' error ',' pov_assignment_list_ent .

    $default  reduce using rule 237 (pov_assignment_list_ne)
