#define __CPLUSPLUS

#define yyFlexLexer adlparser_FlexLexer

/* -*-C-*- */
/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

/* %- */
/* %* */


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
/* %+ */
#ifdef __CPLUSPLUS
#define FLEX_STD   std::
#endif
#include <iostream>
/* %* */
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)


#ifdef YY_REENTRANT

/* For use wherever a Global is accessed or assigned. */
#define YY_G(var) (((struct yy_globals_t*)yy_globals)->var)

/* For use in function prototypes to append the additional argument. */
#ifdef YY_USE_PROTOS
#define YY_LAST_ARG , void * yy_globals
#define YY_ONLY_ARG    void * yy_globals
#else
#define YY_LAST_ARG , yy_globals
#define YY_ONLY_ARG    yy_globals
#define YY_DECL_LAST_ARG void * yy_globals;
#endif

/* For use in function calls to pass the additional argument. */
#define YY_CALL_LAST_ARG  , yy_globals
#define YY_CALL_ONLY_ARG   yy_globals

/* For convenience. */
#define yyin_r YY_G(yyin)
#define yyout_r YY_G(yyout)
#define yyextra_r YY_G(yyextra)
#define yyleng_r YY_G(yyleng)
#define yytext_r YY_G(yytext)
#define yylineno_r YY_G(yylineno)

int yylex_init YY_PROTO((void** scanner));
int yylex_destroy YY_PROTO((void* scanner));

#else /* not YY_REENTRANT */

  /* Define these macros to be no-ops. */
#define YY_G(var) (var)
#define YY_LAST_ARG
#define YY_ONLY_ARG  void
#define YY_CALL_LAST_ARG
#define YY_CALL_ONLY_ARG
#define YY_DECL_LAST_ARG
#endif

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN YY_G(yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((YY_G(yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( YY_G(yyin) YY_CALL_LAST_ARG )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

#ifndef YY_REENTRANT
extern size_t yyleng;
#endif

/* %- */
/* %* */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = YY_G(yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		YY_G(yy_c_buf_p) = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr YY_CALL_LAST_ARG )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
/* %- */
/* %+ */
	FLEX_STD istream* yy_input_file;
/* %* */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

/* %- Standard (non-C++) definition */
/* %c */
#ifndef adlparser_IN_HEADER
/* %e */
#endif /* !adlparser_IN_HEADER */
/* %* */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* %- Standard (non-C++) definition */
/* %c */
#ifndef adlparser_IN_HEADER
/* %e */
#endif /* !adlparser_IN_HEADER */
/* %* */

/* %c */
#ifndef adlparser_IN_HEADER
static void *yy_flex_alloc YY_PROTO(( yy_size_t YY_LAST_ARG ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t YY_LAST_ARG ));
static void yy_flex_free YY_PROTO(( void * YY_LAST_ARG ));
/* %e */
#endif /* !adlparser_IN_HEADER */

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_G(yy_current_buffer) ) \
		YY_G(yy_current_buffer) =    \
            yy_create_buffer( YY_G(yyin), YY_BUF_SIZE YY_CALL_LAST_ARG); \
	YY_G(yy_current_buffer)->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_G(yy_current_buffer) ) \
		YY_G(yy_current_buffer) =    \
            yy_create_buffer( YY_G(yyin), YY_BUF_SIZE YY_CALL_LAST_ARG); \
	YY_G(yy_current_buffer)->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_G(yy_current_buffer)->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* %- Standard (non-C++) definition */
/* %c */
#ifndef adlparser_IN_HEADER
/* %e */
#endif /* !adlparser_IN_HEADER */
/* %* */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	YY_G(yyleng) = (size_t) (yy_cp - yy_bp); \
	YY_G(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	YY_G(yy_c_buf_p) = yy_cp;

/* %* */

/* %c */
#ifndef adlparser_IN_HEADER
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 30
#define YY_END_OF_BUFFER 31
static yyconst short int yy_accept[88] =
    {   0,
        0,    0,    6,    6,    0,    0,   31,   29,   16,   17,
       18,   15,   29,   21,   29,   29,   19,   29,   29,   29,
       28,   28,    6,    5,    6,    6,   14,    8,    9,   10,
        7,   14,   14,   14,   12,   11,   14,   14,   14,   12,
       15,   23,   21,   20,   21,   19,    2,    0,   19,   19,
       25,   22,   24,    0,   28,   28,   28,    6,    3,    4,
       13,    0,   12,    0,   12,   12,   12,    0,   12,   20,
        0,    0,    1,   28,   26,   28,   12,    0,   12,    0,
       19,   28,   27,    0,   12,   12,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    1,    1,    1,    1,    1,
        1,    8,    9,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,   13,   14,
       15,   16,    1,    1,   17,   18,   18,   18,   19,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   17,
        1,   20,    1,    1,   17,    1,   17,   17,   17,   17,

       21,   17,   17,   17,   22,   17,   17,   17,   17,   23,
       17,   17,   24,   25,   26,   27,   17,   17,   17,   17,
       17,   17,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[28] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        1,    3,    1,    1,    1,    1,    4,    5,    5,    1,
        4,    4,    4,    4,    4,    4,    4
    } ;

static yyconst short int yy_base[99] =
    {   0,
        0,    0,   25,   26,   37,    0,  176,  177,  177,  177,
      177,  170,  159,   58,  161,   24,   56,  157,  156,  155,
      159,   57,    0,  177,  157,  159,  177,  177,  177,  177,
      177,  151,   62,  153,   60,  177,  149,  148,  147,  151,
      155,  177,   64,  177,   66,   64,  177,  156,   68,   65,
      177,  177,  177,    0,  148,   78,   80,    0,    0,    0,
      177,   84,  177,   86,   88,   91,   82,    0,  147,   88,
       87,  153,  177,  145,  144,   87,   91,  104,  125,  118,
      111,  105,   92,   62,   19,   20,  177,  116,  121,  124,
      128,  133,  136,  140,  142,  144,  147,  149

    } ;

static yyconst short int yy_def[99] =
    {   0,
       87,    1,   88,   88,   87,    5,   87,   87,   87,   87,
       87,   87,   87,   89,   87,   87,   87,   87,   87,   87,
       90,   90,   91,   87,   91,   91,   87,   87,   87,   87,
       87,   87,   92,   87,   87,   87,   87,   87,   87,   93,
       87,   87,   89,   87,   89,   87,   87,   94,   87,   87,
       87,   87,   87,   95,   90,   90,   90,   91,   91,   91,
       87,   92,   87,   92,   87,   87,   87,   96,   93,   89,
       87,   94,   87,   97,   90,   90,   92,   87,   98,   87,
       87,   97,   90,   87,   87,   98,    0,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87

    } ;

static yyconst short int yy_nxt[205] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,   15,
       16,   17,    8,   18,   19,   20,   21,   21,   21,    8,
       21,   21,   21,   21,   21,   22,   21,   24,   24,   68,
       85,   47,   25,   25,   48,   26,   26,   27,   28,   29,
       30,   31,   32,   33,   27,   27,   34,   27,   35,   36,
       37,   38,   39,   40,   40,   40,   27,   40,   40,   40,
       40,   40,   40,   40,   44,   49,   54,   50,   63,   66,
       44,   67,   70,   85,   49,   46,   50,   45,   56,   46,
       57,   64,   71,   45,   71,   45,   71,   54,   71,   54,
       63,   66,   77,   67,   44,   80,   54,   63,   81,   65,

       75,   54,   65,   64,   76,   64,   78,   45,   78,   78,
       64,   78,   84,   83,   54,   85,   23,   23,   23,   23,
       23,   43,   81,   43,   43,   43,   55,   55,   58,   81,
       58,   58,   58,   62,   68,   62,   62,   62,   69,   69,
       72,   72,   72,   72,   72,   74,   74,   79,   79,   82,
       82,   86,   86,   54,   54,   73,   68,   54,   73,   41,
       68,   61,   61,   61,   65,   61,   60,   59,   54,   53,
       52,   51,   46,   42,   41,   87,    7,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87
    } ;

static yyconst short int yy_chk[205] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,   86,
       85,   16,    3,    4,   16,    3,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,   14,   17,   22,   17,   33,   35,
       43,   35,   45,   84,   50,   46,   50,   14,   22,   49,
       22,   33,   46,   43,   46,   45,   49,   56,   49,   57,
       62,   67,   64,   67,   70,   71,   76,   77,   71,   65,

       56,   83,   66,   62,   57,   64,   65,   70,   65,   66,
       77,   66,   78,   76,   82,   78,   88,   88,   88,   88,
       88,   89,   81,   89,   89,   89,   90,   90,   91,   80,
       91,   91,   91,   92,   79,   92,   92,   92,   93,   93,
       94,   94,   94,   94,   94,   95,   95,   96,   96,   97,
       97,   98,   98,   75,   74,   72,   69,   55,   48,   41,
       40,   39,   38,   37,   34,   32,   26,   25,   21,   20,
       19,   18,   15,   13,   12,    7,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
#define INITIAL 0
/*****************************************************************************/
/**   This file defines a lexical analyser for the ADL language             **/
/*****************************************************************************/
/**									    **/
/** Author: Martin Trautmann						    **/
/**									    **/
/** EMail:   martintrautmann@gmx.de					    **/
/**									    **/
/** License: GPL - free and without any warranty - read COPYING             **/
/**									    **/
/** Package: AniTMT							    **/
/**									    **/
/*****************************************************************************/
#line 16 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
  #include <stdlib.h>
  #include <message/message.hpp>

  #include "adlparser.hpp"		// token type and parser info

  #include "tokens.h"			// token values
 
  // forward declaration
  inline Token get_identifier( char *s, adlparser_info *info );
  inline std::string strip_quotes( std::string text );

#define YYSTYPE adlparser::Token

#define YYLEX_PARAM info
#define YYLEX_PARAM_TYPE (parser_info&)

  inline message::Message_Stream llerr( adlparser_info *info );
  inline message::Message_Stream llwarn ( adlparser_info *info );
  inline message::Message_Stream llverbose( adlparser_info *info, 
					    bool with_position=true, 
					    int vlevel=1, int detail=2 );

  // !! one of the following defines should be called in any rule !!
  // increase file position according to yyleng
#define inc_col() ( info->file_pos.inc_column( yyleng ) )
  // increase file position and store begin and end position
#define tok_pos() ( {info->store_pos(); info->file_pos.inc_column( yyleng ); \
		    info->store_pos();} )

#define ML_COMMENT 1
#define DUMMY_STATEMENT 2

#line 534 "lex.adlparser_.cc"
/* %e */
#endif /* !adlparser_IN_HEADER */

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %- Reentrant structure and macros (non-C++). */
/* %c */
#ifndef adlparser_IN_HEADER
/* %e */
#endif /* !adlparser_IN_HEADER */
/* %- */
/* %c */
#ifndef adlparser_IN_HEADER
/* %e */
#endif /* !adlparser_IN_HEADER */
/* %* */

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int YY_LAST_ARG));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * YY_LAST_ARG));
#endif

#ifndef YY_NO_INPUT
/* %- Standard (non-C++) definition */
/* %c */
#ifndef adlparser_IN_HEADER
/* %e */
#endif /* !adlparser_IN_HEADER */
/* %* */
#endif

#if YY_STACK_USED
#ifndef YY_REENTRANT
/* %c */
#ifndef adlparser_IN_HEADER
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
/* %e */
#endif /* !adlparser_IN_HEADER */
#endif
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state YY_LAST_ARG));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( YY_ONLY_ARG ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( YY_ONLY_ARG ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* %- Standard (non-C++) definition */
/* %+ C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %* */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
/* %+ C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %* */
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %- */
/* %+ */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %* */
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
/* %- Standard (non-C++) definition */
/* %+ C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %* */
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %c */
#ifndef adlparser_IN_HEADER
YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

/* %% [7.0] user's declarations go here */
#line 63 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"


#undef YY_NO_PUSH_STATE 
#undef YY_NO_POP_STATE 
#undef YY_NO_TOP_STATE 


#line 702 "lex.adlparser_.cc"

#ifdef YY_REENTRANT_BISON_PURE
    YY_G(yylval) = yylvalp;
#ifdef YYLTYPE
    YY_G(yylloc) = yyllocp;
#endif
#endif

	if ( YY_G(yy_init) )
		{
		YY_G(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! YY_G(yy_start) )
			YY_G(yy_start) = 1;	/* first start state */

		if ( ! YY_G(yyin) )
/* %- */
/* %+ */
			yyin = & FLEX_STD cin;
/* %* */

		if ( ! YY_G(yyout) )
/* %- */
/* %+ */
			yyout = & FLEX_STD cout;
/* %* */

		if ( ! YY_G(yy_current_buffer) )
			YY_G(yy_current_buffer) =
				yy_create_buffer( YY_G(yyin), YY_BUF_SIZE YY_CALL_LAST_ARG);

		yy_load_buffer_state( YY_CALL_ONLY_ARG );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = YY_G(yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = YY_G(yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = YY_G(yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				YY_G(yy_last_accepting_state) = yy_current_state;
				YY_G(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 88 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 177 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = YY_G(yy_last_accepting_cpos);
			yy_current_state = YY_G(yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = YY_G(yy_hold_char);
			yy_cp = YY_G(yy_last_accepting_cpos);
			yy_current_state = YY_G(yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 70 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ info->file_pos.inc_line(); /* ignore one line comment */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 71 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ inc_col(); yy_push_state(ML_COMMENT); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ inc_col(); yy_pop_state(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ inc_col(); yy_push_state(ML_COMMENT); /*nested comm.*/ } 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ info->file_pos.inc_line(); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ inc_col(); /* ingore multiline comment */ }
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 78 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ inc_col(); }    
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ info->file_pos.tab_inc_column(); } 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ info->file_pos.inc_line(); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ ; /*ignore DOS specific line end*/ }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ BEGIN INITIAL; tok_pos(); return yytext[0]; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return TOK_DUMMY_OPERAND; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return TOK_DUMMY_OPERATOR; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return yytext[0]; }
	YY_BREAK

case 15:
YY_RULE_SETUP
#line 88 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ inc_col(); }    
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 89 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ info->file_pos.tab_inc_column(); } 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 90 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ info->file_pos.inc_line(); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 91 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ ; /*ignore DOS specific line end*/ }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 93 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); yylval->scalar() = atof(yytext);return TOK_SCALAR; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 94 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); yylval->string() = strip_quotes(yytext); 
	        return TOK_STRING; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ llerr(info) << "unterminated string"; tok_pos();
		return TOK_ERROR; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 99 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return TOK_IS_EQUAL; } /* multi character operators */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 100 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return TOK_NOT_EQUAL; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 101 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return TOK_MORE_EQUAL; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 102 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return TOK_LESS_EQUAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 104 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return TOK_FUNC_SIN; } /* sin() function keyword */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 105 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return TOK_FUNC_SQRT; } /* sqrt() function keyword */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 107 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); Token tok = get_identifier(yytext,info);
	    *yylval = tok; return tok.get_type(); } /* identifiers */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 111 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
{ tok_pos(); return yytext[0]; }	/* one charater tokens */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 112 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
ECHO;
	YY_BREAK
#line 959 "lex.adlparser_.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ML_COMMENT):
case YY_STATE_EOF(DUMMY_STATEMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = YY_G(yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_G(yy_current_buffer)->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			YY_G(yy_n_chars) = YY_G(yy_current_buffer)->yy_n_chars;
			YY_G(yy_current_buffer)->yy_input_file = YY_G(yyin);
			YY_G(yy_current_buffer)->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( YY_G(yy_c_buf_p) <= &YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			YY_G(yy_c_buf_p) = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( YY_CALL_ONLY_ARG );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state YY_CALL_LAST_ARG);

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++YY_G(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = YY_G(yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( YY_CALL_ONLY_ARG ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				YY_G(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( YY_CALL_ONLY_ARG ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					YY_G(yy_c_buf_p) = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! YY_G(yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				YY_G(yy_c_buf_p) =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( YY_CALL_ONLY_ARG );

				yy_cp = YY_G(yy_c_buf_p);
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				YY_G(yy_c_buf_p) =
				&YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars)];

				yy_current_state = yy_get_previous_state( YY_CALL_ONLY_ARG );

				yy_cp = YY_G(yy_c_buf_p);
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */
/* %e */
#endif /* !adlparser_IN_HEADER */
/* %+ */
/* %c */
#ifndef adlparser_IN_HEADER
yyFlexLexer::yyFlexLexer( FLEX_STD istream* arg_yyin, FLEX_STD ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete [] yy_state_buf;
	yy_flex_free( yy_start_stack YY_CALL_LAST_ARG );
	yy_delete_buffer( yy_current_buffer YY_CALL_LAST_ARG);
	}

void yyFlexLexer::switch_streams( FLEX_STD  istream* new_in, FLEX_STD ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer  YY_CALL_LAST_ARG);
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  YY_CALL_LAST_ARG) YY_CALL_LAST_ARG);
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}
/* %e */
#endif /* !adlparser_IN_HEADER */
/* %* */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

/* %- */
/* %c */
#ifndef adlparser_IN_HEADER
/* %+ */
int yyFlexLexer::yy_get_next_buffer()
/* %* */
	{
	register char *dest = YY_G(yy_current_buffer)->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( YY_G(yy_c_buf_p) > &YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_G(yy_current_buffer)->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( YY_G(yy_c_buf_p) - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (YY_G(yy_c_buf_p) - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_G(yy_current_buffer)->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_G(yy_current_buffer)->yy_n_chars = YY_G(yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_G(yy_current_buffer)->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_G(yy_current_buffer);

			int yy_c_buf_p_offset =
				(int) (YY_G(yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 YY_CALL_LAST_ARG );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			YY_G(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_G(yy_current_buffer)->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_G(yy_current_buffer)->yy_ch_buf[number_to_move]),
			YY_G(yy_n_chars), num_to_read );

		YY_G(yy_current_buffer)->yy_n_chars = YY_G(yy_n_chars);
		}

	if ( YY_G(yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( YY_G(yyin)  YY_CALL_LAST_ARG);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_G(yy_current_buffer)->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	YY_G(yy_n_chars) += number_to_move;
	YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &YY_G(yy_current_buffer)->yy_ch_buf[0];

	return ret_val;
	}
/* %e */
#endif /* !adlparser_IN_HEADER */

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %- */
/* %c */
#ifndef adlparser_IN_HEADER
/* %+ */
yy_state_type yyFlexLexer::yy_get_previous_state()
/* %* */
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = YY_G(yy_start);

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < YY_G(yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			YY_G(yy_last_accepting_state) = yy_current_state;
			YY_G(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 88 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

/* %- */
/* %+ */
yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %* */
	{
	register int yy_is_jam;
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = YY_G(yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		YY_G(yy_last_accepting_state) = yy_current_state;
		YY_G(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 88 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 87);

	return yy_is_jam ? 0 : yy_current_state;
	}


/* %- */
/* %+ */
void yyFlexLexer::yyunput( int c, register char* yy_bp YY_LAST_ARG)
/* %* */
	{
	register char *yy_cp = YY_G(yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = YY_G(yy_hold_char);

	if ( yy_cp < YY_G(yy_current_buffer)->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = YY_G(yy_n_chars) + 2;
		register char *dest = &YY_G(yy_current_buffer)->yy_ch_buf[
					YY_G(yy_current_buffer)->yy_buf_size + 2];
		register char *source =
				&YY_G(yy_current_buffer)->yy_ch_buf[number_to_move];

		while ( source > YY_G(yy_current_buffer)->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_G(yy_current_buffer)->yy_n_chars =
			YY_G(yy_n_chars) = YY_G(yy_current_buffer)->yy_buf_size;

		if ( yy_cp < YY_G(yy_current_buffer)->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	yytext_ptr = yy_bp;
	YY_G(yy_hold_char) = *yy_cp;
	YY_G(yy_c_buf_p) = yy_cp;
	}
/* %- */
/* %* */


/* %- */
/* %+ */
int yyFlexLexer::yyinput()
/* %* */
	{
	int c;

	*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);

	if ( *YY_G(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( YY_G(yy_c_buf_p) < &YY_G(yy_current_buffer)->yy_ch_buf[YY_G(yy_n_chars)] )
			/* This was really a NUL. */
			*YY_G(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = YY_G(yy_c_buf_p) - yytext_ptr;
			++YY_G(yy_c_buf_p);

			switch ( yy_get_next_buffer( YY_CALL_ONLY_ARG ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( YY_G(yyin) YY_CALL_LAST_ARG);

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( YY_CALL_ONLY_ARG ) )
						return EOF;

					if ( ! YY_G(yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(YY_CALL_ONLY_ARG);
#else
					return input(YY_CALL_ONLY_ARG);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					YY_G(yy_c_buf_p) = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) YY_G(yy_c_buf_p);	/* cast for 8-bit char's */
	*YY_G(yy_c_buf_p) = '\0';	/* preserve yytext */
	YY_G(yy_hold_char) = *++YY_G(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
	}
/* %- */
/* %* */

/* %- */
/* %+ */
void yyFlexLexer::yyrestart( FLEX_STD istream* input_file )
/* %* */
	{
	if ( ! YY_G(yy_current_buffer) )
		YY_G(yy_current_buffer) =
            yy_create_buffer( YY_G(yyin), YY_BUF_SIZE YY_CALL_LAST_ARG);

	yy_init_buffer( YY_G(yy_current_buffer), input_file YY_CALL_LAST_ARG);
	yy_load_buffer_state( YY_CALL_ONLY_ARG );
	}


/* %- */
/* %+ */
void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %* */
	{
	if ( YY_G(yy_current_buffer) == new_buffer )
		return;

	if ( YY_G(yy_current_buffer) )
		{
		/* Flush out information for old buffer. */
		*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
		YY_G(yy_current_buffer)->yy_buf_pos = YY_G(yy_c_buf_p);
		YY_G(yy_current_buffer)->yy_n_chars = YY_G(yy_n_chars);
		}

	YY_G(yy_current_buffer) = new_buffer;
	yy_load_buffer_state( YY_CALL_ONLY_ARG );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	YY_G(yy_did_buffer_switch_on_eof) = 1;
	}


/* %- */
/* %+ */
void yyFlexLexer::yy_load_buffer_state()
/* %* */
	{
	YY_G(yy_n_chars) = YY_G(yy_current_buffer)->yy_n_chars;
	yytext_ptr = YY_G(yy_c_buf_p) = YY_G(yy_current_buffer)->yy_buf_pos;
	YY_G(yyin) = YY_G(yy_current_buffer)->yy_input_file;
	YY_G(yy_hold_char) = *YY_G(yy_c_buf_p);
	}


/* %- */
/* %+ */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( FLEX_STD istream* file, int size )
/* %* */
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) YY_CALL_LAST_ARG );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 YY_CALL_LAST_ARG );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file YY_CALL_LAST_ARG);

	return b;
	}


/* %- */
/* %+ */
void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %* */
	{
	if ( ! b )
		return;

	if ( b == YY_G(yy_current_buffer) )
		YY_G(yy_current_buffer) = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf YY_CALL_LAST_ARG );

	yy_flex_free( (void *) b YY_CALL_LAST_ARG );
	}


/* %- */
/* %+ */
#ifndef YY_NEVER_INTERACTIVE
extern "C" int isatty YY_PROTO(( int )) THROW_NIL ;
#endif
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, FLEX_STD istream* file )
/* %* */

	{
	int oerrno = errno;

	yy_flush_buffer( b YY_CALL_LAST_ARG);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

/* %- */
/* %+ */
	b->yy_is_interactive = 0;
/* %* */
	errno = oerrno;
	}


/* %- */
/* %+ */
void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %* */
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_G(yy_current_buffer) )
		yy_load_buffer_state( YY_CALL_ONLY_ARG );
	}
/* %* */


#ifndef YY_NO_SCAN_BUFFER
/* %- */
/* %* */
#endif


#ifndef YY_NO_SCAN_STRING
/* %- */
/* %* */
#endif


#ifndef YY_NO_SCAN_BYTES
/* %- */
/* %* */
#endif


#ifndef YY_NO_PUSH_STATE
/* %- */
/* %+ */
void yyFlexLexer::yy_push_state( int new_state )
/* %* */
	{
	if ( YY_G(yy_start_stack_ptr) >= YY_G(yy_start_stack_depth) )
		{
		yy_size_t new_size;

		YY_G(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = YY_G(yy_start_stack_depth) * sizeof( int );

		if ( ! YY_G(yy_start_stack) )
			YY_G(yy_start_stack) = (int *) yy_flex_alloc( new_size YY_CALL_LAST_ARG );

		else
			YY_G(yy_start_stack) = (int *) yy_flex_realloc(
					(void *) YY_G(yy_start_stack), new_size YY_CALL_LAST_ARG );

		if ( ! YY_G(yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
/* %- */
/* %+ */
void yyFlexLexer::yy_pop_state()
/* %* */
	{
	if ( --YY_G(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)]);
	}
#endif


#ifndef YY_NO_TOP_STATE
/* %- */
/* %+ */
int yyFlexLexer::yy_top_state()
/* %* */
	{
	return YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr) - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %- */
/* %+ */

void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	FLEX_STD cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}
/* %* */


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		YY_G(yytext)[YY_G(yyleng)] = YY_G(yy_hold_char); \
		YY_G(yy_c_buf_p) = YY_G(yytext) + n; \
		YY_G(yy_hold_char) = *YY_G(yy_c_buf_p); \
		*YY_G(yy_c_buf_p) = '\0'; \
		YY_G(yyleng) = n; \
		} \
	while ( 0 )



#ifdef YY_REENTRANT

/* Accessor  methods (get/set functions) to struct members. */

#ifndef YY_NO_GET_EXTRA
#ifdef YY_USE_PROTOS
YY_EXTRA_TYPE yyget_extra( YY_ONLY_ARG )
#else
YY_EXTRA_TYPE yyget_extra( YY_ONLY_ARG )
    YY_DECL_LAST_ARG
#endif
{
    return YY_G(yyextra);
}
#endif /* !YY_NO_GET_EXTRA */

#ifndef YY_NO_GET_LINENO
#  ifdef YY_USE_PROTOS
int yyget_lineno( YY_ONLY_ARG )
#  else
int yyget_lineno( YY_ONLY_ARG )
    YY_DECL_LAST_ARG
#  endif
{
    return YY_G(yylineno);
}
#endif /* !YY_NO_GET_LINENO */

#ifndef YY_NO_GET_IN
#ifdef YY_USE_PROTOS
FILE *yyget_in( YY_ONLY_ARG )
#else
FILE *yyget_in( YY_ONLY_ARG )
    YY_DECL_LAST_ARG
#endif
{
    return YY_G(yyin);
}
#endif /* !YY_NO_GET_IN */

#ifndef YY_NO_GET_OUT
#ifdef YY_USE_PROTOS
FILE *yyget_out( YY_ONLY_ARG )
#else
FILE *yyget_out( YY_ONLY_ARG )
    YY_DECL_LAST_ARG
#endif
{
    return YY_G(yyout);
}
#endif /* !YY_NO_GET_OUT */

#ifndef YY_NO_GET_LENG
#ifdef YY_USE_PROTOS
int yyget_leng( YY_ONLY_ARG )
#else
int yyget_leng( YY_ONLY_ARG )
    YY_DECL_LAST_ARG
#endif
{
    return YY_G(yyleng);
}
#endif /* !YY_NO_GET_LENG */

#ifndef YY_NO_GET_TEXT
#ifdef YY_USE_PROTOS
char *yyget_text( YY_ONLY_ARG )
#else
char *yyget_text( YY_ONLY_ARG )
    YY_DECL_LAST_ARG
#endif
{
    return YY_G(yytext);
}
#endif /* !YY_NO_GET_TEXT */

#ifndef YY_NO_SET_EXTRA
#ifdef YY_USE_PROTOS
void yyset_extra( YY_EXTRA_TYPE user_defined YY_LAST_ARG )
#else
void yyset_extra( user_defined YY_LAST_ARG )
    YY_EXTRA_TYPE user_defined;
    YY_DECL_LAST_ARG
#endif
{
    YY_G(yyextra) = user_defined ;
}
#endif /* !YY_NO_SET_EXTRA */

#ifndef YY_NO_SET_LINENO
#  ifdef YY_USE_PROTOS
void yyset_lineno( int line_number YY_LAST_ARG )
#  else
void yyset_lineno( line_number YY_LAST_ARG )
    int line_number;
    YY_DECL_LAST_ARG
#  endif
{
    YY_G(yylineno) = line_number;
}
#endif /* !YY_NO_SET_LINENO */


#ifndef YY_NO_SET_IN
#ifdef YY_USE_PROTOS
void yyset_in( FILE * in_str YY_LAST_ARG )
#else
void yyset_in( in_str YY_LAST_ARG )
    FILE * in_str;
    YY_DECL_LAST_ARG
#endif
{
    YY_G(yyin) = in_str ;
}
#endif /* !YY_NO_SET_IN */

#ifndef YY_NO_SET_OUT
#ifdef YY_USE_PROTOS
void yyset_out( FILE * out_str YY_LAST_ARG )
#else
void yyset_out( out_str YY_LAST_ARG )
    FILE * out_str;
    YY_DECL_LAST_ARG
#endif
{
    YY_G(yyout) = out_str ;
}
#endif /* !YY_NO_SET_OUT */

/* Accessor methods for yylval and yylloc */

#ifdef YY_REENTRANT_BISON_PURE
#ifndef YY_NO_GET_LVAL
#ifdef YY_USE_PROTOS
YYSTYPE * yyget_lval( YY_ONLY_ARG )
#else
YYSTYPE * yyget_lval( YY_ONLY_ARG )
    YY_DECL_LAST_ARG
#endif
{
    return YY_G(yylval);
}
#endif /* !YY_NO_GET_LVAL */

#ifndef YY_NO_SET_LVAL
#ifdef YY_USE_PROTOS
void yyset_lval( YYSTYPE * yylvalp YY_LAST_ARG )
#else
void yyset_lval( yylvalp YY_LAST_ARG )
    YYSTYPE * yylvalp;
    YY_DECL_LAST_ARG
#endif
{
    YY_G(yylval) = yylvalp;
}
#endif /* !YY_NO_SET_LVAL */

#ifdef YYLTYPE
#ifndef YY_NO_GET_LLOC
#ifdef YY_USE_PROTOS
YYLTYPE *yyget_lloc( YY_ONLY_ARG )
#else
YYLTYPE *yyget_lloc( YY_ONLY_ARG )
    YY_DECL_LAST_ARG
#endif
{
    return YY_G(yylloc);
}
#endif /* !YY_NO_GET_LLOC */

#ifndef YY_NO_SET_LLOC
#ifdef YY_USE_PROTOS
void yyset_lloc( YYLTYPE * yyllocp YY_LAST_ARG )
#else
void yyset_lloc( yyllocp YY_LAST_ARG )
    YYLTYPE * yyllocp;
    YY_DECL_LAST_ARG
#endif
{
    YY_G(yylloc) = yyllocp;
}
#endif /* !YY_NO_SET_LLOC */

#endif /* YYLTYPE */
#endif /* YY_REENTRANT_BISON_PURE */


#ifdef YY_USE_PROTOS
static int yy_init_globals( void* yy_globals)
#else
static int yy_init_globals( yy_globals )
    void* yy_globals;
#endif
    {
    /* Initialization is the same as for the non-reentrant scanner.
       This function is called once per scanner lifetime. */

  /* We do not touch yylineno unless the option is enabled. */
#ifdef YY_USE_LINENO
    YY_G(yylineno) =  1;
#endif
    YY_G(yy_current_buffer) = 0;
    YY_G(yy_c_buf_p) = (char *) 0;
    YY_G(yy_init) = 1;
    YY_G(yy_start) = 0;
    YY_G(yy_start_stack_ptr) = 0;
    YY_G(yy_start_stack_depth) = 0;
    YY_G(yy_start_stack) = (int *) 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    YY_G(yyin) = stdin;
    YY_G(yyout) = stdout;
#else
    YY_G(yyin) = (FILE *) 0;
    YY_G(yyout) = (FILE *) 0;
#endif
    return 0;
    }

/* User-visible API */
#ifdef YY_USE_PROTOS
int yylex_init( void** ptr_yy_globals)
#else
int yylex_init( ptr_yy_globals )
    void** ptr_yy_globals;
#endif
    {
    *ptr_yy_globals = (void *) yy_flex_alloc ( sizeof( struct yy_globals_t ), NULL );
    yy_init_globals ( *ptr_yy_globals );
    return 0;
    }

#ifdef YY_USE_PROTOS
int yylex_destroy( void* yy_globals )
#else
int yylex_destroy( yy_globals )
    void* yy_globals;
#endif
    {
    if( yy_globals )
        {

            /* Destroy the current (main) buffer. */
            yy_delete_buffer( YY_G(yy_current_buffer) YY_CALL_LAST_ARG );
            YY_G(yy_current_buffer) = NULL;

            /* Destroy the start condition stack. */
            if( YY_G(yy_start_stack) ) {
                yy_flex_free( YY_G(yy_start_stack) YY_CALL_LAST_ARG );
                YY_G(yy_start_stack) = NULL;
            }

            /* Destroy the main struct. */
            yy_flex_free ( yy_globals YY_CALL_LAST_ARG );
        }
    return 0;
    }

#endif /* End YY_REENTRANT */

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n YY_LAST_ARG)
#else
static void yy_flex_strncpy( s1, s2, n YY_LAST_ARG)
char *s1;
yyconst char *s2;
int n;
YY_DECL_LAST_ARG
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s YY_LAST_ARG)
#else
static int yy_flex_strlen( s YY_LAST_ARG)
yyconst char *s;
YY_DECL_LAST_ARG
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size YY_LAST_ARG )
#else
static void *yy_flex_alloc( size YY_LAST_ARG )
yy_size_t size;
YY_DECL_LAST_ARG
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size YY_LAST_ARG )
#else
static void *yy_flex_realloc( ptr, size YY_LAST_ARG )
void *ptr;
yy_size_t size;
YY_DECL_LAST_ARG
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr YY_LAST_ARG )
#else
static void yy_flex_free( ptr YY_LAST_ARG )
void *ptr;
YY_DECL_LAST_ARG
#endif
	{
	free( (char *) ptr );	/* see yy_flex_realloc() for (char *) cast */
	}

#if YY_MAIN
int main()
	{

#ifdef YY_REENTRANT
    void *lexer;
    yylex_init(&lexer);
    yylex( lexer );
    yylex_destroy( lexer);

#else
	yylex();
#endif

	return 0;
	}
#endif
/* %e */
#endif /* !adlparser_IN_HEADER */
#line 112 "/home/martin/Programmieren/sourceforge/anitmt/anitmt-calc/input/adl2/./scanner.ll"
#ifndef adlparser_IN_HEADER

// asks all id_resolver defined in info, whether they may resolve the 
// identifier. In case they don't it returns TOK_INVALID_ID 
inline Token get_identifier( char *s,adlparser_info *info )
{
  Token tok;
  if( info->id_resolver ) tok = info->id_resolver->get_identifier(s); 
  // if resolver didn't know what the string means?
  if( tok.get_type() == TOK_INVALID_ID )
  {
    tok.identifier() = s; //... return it as id string
  }
  return tok;
}

// strips strings from quotes
// (has a lot of overhead, but no problems with dynamic memory at pointers)
std::string strip_quotes( std::string text )
{
  assert(text[0] == '"');
  assert(text[text.length()-1] == '"');
  return text.substr(1,text.length()-2);
}

//*************************
// interfaces to messages
//*************************

#undef tok_pos
#undef inc_col

inline message::Message_Stream llerr( adlparser_info *info )
{ 
  
  message::Message_Stream msg(message::noinit);
  info->msg.error( &info->file_pos ).copy_to(msg);
  return msg;
}

inline message::Message_Stream llwarn( adlparser_info *info )
{
  message::Message_Stream msg(message::noinit);
  info->msg.warn( &info->file_pos ).copy_to(msg);
  return msg;
}

inline message::Message_Stream llverbose( adlparser_info *info, 
					  bool with_position, 
					  int vlevel, int detail )
{
  message::Message_Stream msg(message::noinit);
  if( with_position )
    info->msg.verbose( vlevel, &info->file_pos, detail ).copy_to(msg);
  else
    info->
      msg.verbose( vlevel, message::GLOB::no_position, detail ).copy_to(msg);

  return msg;
}

void yyFlexLexer::goto_initial_state() 
{
  BEGIN INITIAL;
}
void yyFlexLexer::dummy_statement_follows() 
{
  BEGIN DUMMY_STATEMENT;
}
void yyFlexLexer::set_input_stream( std::istream &in ) 
{
  yyin = &in;
}

/* end of lexical analizer */
#endif /* !adlparser_IN_HEADER */
